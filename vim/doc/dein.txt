# dein
## 主な関数
- dein#update()
- dein#clear_state()
- dein#recache_runtimepath()   : deinの挙動がおかしくなったら実行する
- dein#source([{plugins}])     : 引数のプラグインを手動でロードする
- dein#is_sourced([{plugins}]) : 引数のプラグインがロードされているか確認する(loaded:1)
  - g:dein#_plugins['プラグイン名']['sourced']変数を確認してもいい

## toml
- on_ft     = ['foo', 'bar']
- on_cmd    = 'Foo'
- on_event  = 'FooBar'
- on_func   = 'Foo'
- on_map    = '<Plug>(foo)'
- on_source = 'foo'
- on_if     = 'has("foo")'   ※「on_event」と併記する

- hook_add                   : プラグインが追加(認識)されたとき (基本的にプラグインの発火コマンド(on_cmd)をキーマップに割り当てる設定をここに記述する)
- hook_source(lazyのみ)      : プラグインがロードされる直前 (基本的にプラグインのだいたいの設定はここに記述する(発火コマンドのキーマップを記述しても,それ自体が読み込まれていないため読み込めない))
- hook_post_source(lazyのみ) : プラグインがロードされた直後 (読み込んだプラグイン自体の機能を使うときはここに記述する)
- hook_post_update           : プラグインが更新された直後

### 外部ファイル呼び出し
hook_add = 'execute "source" g:vimrc_dir . "/rc/subrc/lightline.rc.vim"'
変数なし「source path」
変数あり「execute "source" "path1" . 変数名 . "path2"」(.は連結)


## 遅延ロードについて
- 自動で遅延ロードプラグインのプラグイン名をプレフィックスとしたコマンドを登録する
- そのコマンドが入力されマッチした場合は,(設定した発火条件でなくても)そのプラグインをロードする
 - vim-minimapなら「minimap」,vim-cheatsheetなら「cheatsheet」がコマンドとして自動登録される
  - 「:Minimap」を実行した場合,vim-minimapはMinimapコマンドがあるため自動登録したコマンドにマッチし,ロードされる
  - 「:Cheat」を実行した場合,vim-cheatsheetはCheatsheetがコマンド名として自動登録されているのでマッチせずに,ロードされない
 > dein の機能として、プラグインのコマンドのプレフィクスを自動認識する機能があり、プレフィクスにマッチしたコマンドは自動的にロードできるからです。
 > ただし自動認識は完璧ではありません。
 > プレフィクスはプラグイン名から計算されるので、
 > 例えば vim-minimap なら minimap、vim-cheatsheet なら cheatsheet になります。
 > Minimap には minimap のプレフィクスがマッチしますが Cheat と cheatsheet はマッチしないのでロードできないのです。

