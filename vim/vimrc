" Plugin Manager {{{1

" Install & Load Dein {{{2
let s:DEIN_BASE_PATH = $HOME . '/.cache/vim/bundle/'
let s:DEIN_PATH      = expand(s:DEIN_BASE_PATH . 'repos/github.com/Shougo/dein.vim')
if !isdirectory(s:DEIN_PATH)
  if executable('git') && confirm('Install dein.vim or Launch vim immediately', "&Yes\n&No", 1)
    execute '!git clone --depth=1 https://github.com/Shougo/dein.vim' s:DEIN_PATH
  endif
endif

let &runtimepath .= ',' . s:DEIN_PATH
let g:dein#install_max_processes    = 20
let g:dein#install_process_timeout  = 300
let g:dein#lazy_rplugins            = 1
let g:dein#install_github_api_token = $DEIN_GITHUB_TOKEN
" }}}2

" Load Plugin {{{2
if dein#load_state(s:DEIN_BASE_PATH)
  call dein#begin(s:DEIN_BASE_PATH)

  " Dein {{{3
  call dein#add('Shougo/dein.vim')
  call dein#add('haya14busa/dein-command.vim', {'on_cmd': ['Dein']})
  " }}}3

  " denops {{{3
  call dein#add('vim-denops/denops.vim')
  call dein#add('lambdalisue/guise.vim')
  " }}}3

  " Doc {{{3
  call dein#add('vim-jp/vimdoc-ja')
  " }}}3

  " IDE {{{3
  call dein#add('neoclide/coc.nvim', {'rev': 'release'})
  call dein#add('puremourning/vimspector')
  " }}}3

  " Language {{{3
  call dein#add('elzr/vim-json', {'on_ft': ['json']})
  call dein#add('plasticboy/vim-markdown', {'on_ft': ['markdown']})
  call dein#add('rhysd/vim-fixjson', {'on_ft': ['json']})
  if has('nvim')
    call dein#add('JoosepAlviste/nvim-ts-context-commentstring', {'lazy': 1})
    call dein#add('p00f/nvim-ts-rainbow', {'lazy': 1})
  endif
  " }}}3

  " Git {{{3
  " call dein#add('tpope/vim-fugitive')
  call dein#add('lambdalisue/gina.vim')
  call dein#add('wting/gitsessions.vim', {'on_cmd': ['GitSessionSave', 'GitSessionLoad']})
  if has('nvim')
    call dein#add('APZelos/blamer.nvim')
  endif
  " }}}3

  " Fuzzy Finder {{{3
  call dein#add('junegunn/fzf', { 'build': './install --all', 'merged': 0 })
  call dein#add('junegunn/fzf.vim')
  " call dein#add('yuki-yano/fzf-preview.vim', {'rev': 'release/rpc'})
  " }}}3

  " textobj & operator {{{3
  " TODO: lazy load
  call dein#add('kana/vim-textobj-user')
  call dein#add('kana/vim-operator-user')
  call dein#add('tpope/vim-surround') "s
  call dein#add('tpope/vim-commentary') "gc
  call dein#add('machakann/vim-swap') " g< g> i, a,
  call dein#add('Julian/vim-textobj-variable-segment') " iv av
  call dein#add('kana/vim-textobj-entire', {'on_map': {'ox': '<Plug>(textobj-entire'}}) " ie ae
  call dein#add('kana/vim-textobj-line', {'on_map': {'ox': '<Plug>(textobj-line'}}) " al il
  call dein#add('machakann/vim-textobj-functioncall', {'on_map': {'ox': '<Plug>(textobj-functioncall'}}) " if af
  call dein#add('mattn/vim-textobj-url', {'on_map': {'ox': '<Plug>(textobj-url'}}) " iu au
  call dein#add('yuki-yano/vim-textobj-cursor-context', {'on_map': {'ox': '<Plug>(textobj-cursorcontext'}}) " ic ac
  call dein#add('mopp/vim-operator-convert-case', {'on_map': ['<Plug>(operator-convert-case']}) " cy
  call dein#add('yuki-yano/vim-operator-replace', {'on_map': ['<Plug>(operator-replace']})  " _
  " call dein#add('kana/vim-textobj-indent') " ii ai
  " }}}3

  " Edit & Move & Search {{{3
  call dein#add('LeafCage/yankround.vim')
  call dein#add('haya14busa/vim-asterisk', {'on_map': ['<Plug>']})
  call dein#add('haya14busa/vim-edgemotion', {'on_map': ['<Plug>']})
  call dein#add('hrsh7th/vim-eft', {'on_map': ['<Plug>']})
  call dein#add('junegunn/vim-easy-align', {'on_map': ['<Plug>(EasyAlign)']})
  call dein#add('mattn/vim-maketable', {'on_cmd': ['MakeTable']})
  call dein#add('osyo-manga/vim-anzu', {'on_map': ['<Plug>']})
  call dein#add('osyo-manga/vim-jplus', {'on_map': ['<Plug>']})
  call dein#add('t9md/vim-textmanip', {'on_map': ['<Plug>']})
  call dein#add('terryma/vim-expand-region', {'on_map': ['<Plug>']})
  call dein#add('thinca/vim-qfreplace', {'on_cmd': ['Qfreplace']})
  call dein#add('tpope/vim-repeat')

  if has('nvim')
    call dein#add('kevinhwang91/nvim-hlslens')
    call dein#add('nacro90/numb.nvim')
  endif
  " }}}3

  " Appearance {{{3
  " call dein#add('Yggdroot/indentLine')
  call dein#add('itchyny/lightline.vim')
  call dein#add('lambdalisue/readablefold.vim')
  call dein#add('itchyny/vim-cursorword')
  call dein#add('machakann/vim-highlightedyank', {'on_event': ['TextYankPost']})
  call dein#add('mopp/smartnumber.vim')
  call dein#add('ryanoasis/vim-devicons')

  if has('nvim')
    call dein#add('dstein64/nvim-scrollview', {'on_event': ['WinScrolled']})
    call dein#add('kevinhwang91/nvim-bqf', {'on_ft': ['qf']})
    call dein#add('norcalli/nvim-colorizer.lua')
  endif
  " }}}3

  " Util {{{3
  call dein#add('AndrewRadev/linediff.vim', {'on_cmd': ['LineDiff']})
  call dein#add('aiya000/aho-bakaup.vim', {'on_event': ['InsertEnter', 'TextChanged']})
  call dein#add('glidenote/memolist.vim')
  call dein#add('itchyny/vim-qfedit', {'on_ft': ['qf']})
  call dein#add('kana/vim-niceblock')
  call dein#add('lambdalisue/suda.vim', {'on_cmd': ['SudaRead', 'SudaWrite']})
  call dein#add('mbbill/undotree', {'on_cmd': ['UndotreeToggle']})
  call dein#add('tyru/capture.vim', {'on_cmd': ['Capture']})
  " call dein#add('tyru/vim-altercmd')
  call dein#add('tsuyoshicho/vim-altercmd')
  call dein#add('voldikss/vim-floaterm', {'on_cmd': ['FloatermToggle']})
  call dein#add('SirVer/ultisnips') " cocで依存しているため導入する
  " call dein#add('dhruvasagar/vim-table-mode')
  " call dein#add('iamcco/markdown-preview.nvim', {'build': 'sh -c "cd app && yarn install"'})

  if has('nvim')
    call dein#add('gelguy/wilder.nvim', {'on_map': [':', '/', '?'], 'hook_source': 'call SetUpWilder()'})
  endif
  " }}}3

  " Color Theme {{{3
  call dein#add('sainnhe/edge')
  call dein#add('sainnhe/gruvbox-material')
  " }}}3

  call dein#end()
  call dein#save_state()
endif

filetype plugin indent on
" }}}2

" Install Plugin {{{2
if dein#check_install() && confirm('Would you like to download some plugins ?', "&Yes\n&No", 1)
  call dein#install()
endif
" }}}2
" }}}1

" Global Settings {{{1
" Encoding {{{2
set encoding=utf-8
set fileencodings=utf-8,sjis,cp932,euc-jp
set fileformats=unix,mac,dos
set termencoding=utf-8
scriptencoding utf-8
" }}}2

" Easy autocmd {{{2
augroup vimrc
  autocmd!
augroup END
command! -nargs=* AutoCmd autocmd vimrc <args>
" }}}2

" vimrc_dir {{{2
let g:vimrc_dir = expand('<sfile>:p:h')
" }}}2

" Mappings {{{2
"-------------------------------------------------------------------------------------------|
"  Modes     | Normal | Insert | Command | Visual | Select | Operator | Terminal | Lang-Arg |
" [nore]map  |    @   |   -    |    -    |   @    |   @    |    @     |    -     |    -     |
" n[nore]map |    @   |   -    |    -    |   -    |   -    |    -     |    -     |    -     |
" n[orem]ap! |    -   |   @    |    @    |   -    |   -    |    -     |    -     |    -     |
" i[nore]map |    -   |   @    |    -    |   -    |   -    |    -     |    -     |    -     |
" c[nore]map |    -   |   -    |    @    |   -    |   -    |    -     |    -     |    -     |
" v[nore]map |    -   |   -    |    -    |   @    |   @    |    -     |    -     |    -     |
" x[nore]map |    -   |   -    |    -    |   @    |   -    |    -     |    -     |    -     |
" s[nore]map |    -   |   -    |    -    |   -    |   @    |    -     |    -     |    -     |
" o[nore]map |    -   |   -    |    -    |   -    |   -    |    @     |    -     |    -     |
" t[nore]map |    -   |   -    |    -    |   -    |   -    |    -     |    @     |    -     |
" l[nore]map |    -   |   @    |    @    |   -    |   -    |    -     |    -     |    @     |
"-------------------------------------------------------------------------------------------"

"" Leader
let g:mapleader = "\<Space>"
noremap <Space> <Nop>
noremap <dev>   <Nop>
map     m       <dev>

"" Disable s
noremap s <Nop>

"" Zero (Move beginning toggle)
" noremap <expr> 0 getline('.')[0 : col('.') - 2] =~# '^\s\+$' ? '0' : '^'

"" Esc
inoremap jj <ESC>

"" BackSpace
" imap <C-h> <BS>
cmap <C-h> <BS>

"" Move
"nnoremap j gj
"nnoremap k gk
"nnoremap gj j
"nnoremap jk k
inoremap <C-j> <Down>
inoremap <C-k> <Up>
inoremap <C-h> <Left>
inoremap <C-l> <Right>

"" Buffer
nnoremap <C-q> <C-^>

"" Save and reload (for treesitter)
nnoremap <silent> <Space>R :<C-u>w<CR>:e!<CR>

"" Yank
nnoremap Y y$
function! s:yank_without_indent() abort
  normal! gvy
  let content = getreg(v:register, 1, v:true)
  let leading = min(map(filter(copy(content), { _, v -> len(v) != 0 }), { _, v -> len(matchstr(v, '^\s*')) }))
  call map(content, { _, v -> v[leading :] })
  call setreg(v:register, content, getregtype(v:register))
endfunction
xnoremap gy <Esc>:<C-u>call <SID>yank_without_indent()<CR>

"" Save
nnoremap <silent> <Space>w :<C-u>update<CR>
nnoremap <silent> <Space>W :<C-u>update!<CR>

"" Automatically indent with i and A
nnoremap <expr> i len(getline('.')) ? "i" : "\"_cc"
nnoremap <expr> A len(getline('.')) ? "A" : "\"_cc"

" Ignore registers
nnoremap x "_x

"" incsearch
" nnoremap / /\v
" nnoremap ? ?\v
cnoremap <expr> / empty(getcmdline()) <Bar><Bar> getcmdline() ==# '\v' ? '<C-u>\<' : getcmdline() ==# '\<' ? '\><Left><Left>' : '/'
cnoremap <expr> ? empty(getcmdline()) <Bar><Bar> getcmdline() ==# '\v' ? '<C-u>\<' : getcmdline() ==# '\<' ? '\><Left><Left>' : '?'

"" tagjump
nnoremap <silent> s<C-]> :<C-u>wincmd ]<CR>
nnoremap <silent> v<C-]> :<C-u>vertical wincmd ]<CR>
nnoremap <silent> t<C-]> :<C-u>tab wincmd ]<CR>
nnoremap <silent> r<C-]> <C-w>}

"" QuickFix
nnoremap [c :cprevious<CR>
nnoremap ]c :cnext<CR>

"" Location List
nnoremap [l :lprevious<CR>
nnoremap ]l :lnext<CR>

"" CommandLine
noremap! <C-a> <Home>
noremap! <C-b> <Left>
noremap! <C-d> <Del>
noremap! <C-e> <End>
noremap! <C-f> <Right>
cnoremap <C-n> <Down>
cnoremap <C-p> <Up>

"" Window
nnoremap <silent> ss :<C-u>sp<CR>
nnoremap <silent> sv :<C-u>vs<CR>
nnoremap <silent> sj <C-w>j
nnoremap <silent> sk <C-w>k
nnoremap <silent> sl <C-w>l
nnoremap <silent> sh <C-w>h
nnoremap <silent> sz :<C-u>call <SID>toggle_maximize_window()<CR>
if has('nvim')
  function! s:focus_floating() abort
    if !empty(nvim_win_get_config(win_getid()).relative)
      wincmd p
      return
    endif
    for winnr in range(1, winnr('$'))
      let winid = win_getid(winnr)
      let conf = nvim_win_get_config(winid)
      if conf.focusable && !empty(conf.relative)
        call win_gotoid(winid)
        return
      endif
    endfor
    execute "normal! \<C-w>\<C-w>"
  endfunction
  nnoremap <silent> <C-w><C-w> :<C-u>call <SID>focus_floating()<CR>
endif
function! s:toggle_maximize_window() abort
  if !exists('g:is_maximize_window') || g:is_maximize_window == 0
    :resize
    :vertical resize
    let g:is_maximize_window = 1
  else
    execute "normal \<C-w>="
    let g:is_maximize_window = 0
  endif
endfunction

"" Tab
nnoremap <silent> st        :<C-u>tabnew<CR>
nnoremap <silent> <S-Tab>   :<C-u>tabprevious<CR>
nnoremap <silent> <Tab>     :<C-u>tabnext<CR>
nnoremap <silent> <S-RIGHT> :tabm +1<CR>
nnoremap <silent> <S-LEFT>  :tabm -1<CR>
nnoremap <silent> sc        :tabclose<CR>
nnoremap <silent> sC        :tabonly<CR>
nnoremap <silent> s,        :<C-u>call <SID>change_tab_label()<CR>
function! s:change_tab_label() abort
  let l:instr = input('input new tab label: ')
  if len(trim(l:instr)) > 0
    let t:name = l:instr
  endif
  " update screen
  redraw! | echo ''
endfunction

"" resize
nnoremap <Left>  :<C-u>vertical resize -1<CR>
nnoremap <Right> :<C-u>vertical resize +1<CR>
nnoremap <Up>    :<C-u>resize -1<CR>
nnoremap <Down>  :<C-u>resize +1<CR>

"" regexp
nnoremap <Space>r :<C-u>%s/\v//g<Left><Left><Left>
xnoremap <Space>r "sy:%s/\v<C-r>=substitute(@s, '/', '\\/', 'g')<CR>//g<Left><Left>

"" Clipboard
nnoremap <Space>y "+yy
vnoremap <Space>y "+yy
nnoremap <Space>p "+p
" nnoremap <silent> <Space>y :<C-u>call system("pbcopy", @") <Bar> echo "Copied \" register to OS clipboard"<CR>
" nnoremap <silent> <Space>p :<C-u>let @" = substitute(system("pbpaste"), "\n\+$", "", "") <Bar> echo "Copied from OS clipboard to \" register"<CR>
" xnoremap <silent> <Space>p <Esc>:let @" = substitute(system("pbpaste"), "\n\+$", "", "") <Bar> echo "Copied from OS clipboard to \" register"<CR>gv

"" highlight word on cursor
nnoremap <silent> <Space><Space> :let @/ = '\<' . expand('<cword>') . '\>'<CR>:set hlsearch<CR>
" }}}2

" Set Options {{{2
"" NeoVim
if has('nvim')
  let g:loaded_python_provider = 0
  let g:loaded_perl_provider   = 0
  let g:loaded_ruby_provider   = 0
  if has('mac') || has('unix')
    let g:python3_host_prog=exepath('python3')
    set mouse=a
  else
    " windowsではpython3ではなくpython
    let g:python3_host_prog=exepath('python')
  endif

  set inccommand=nosplit

  tnoremap <Esc> <C-\><C-n>
  AutoCmd TermOpen * set nonumber | set norelativenumber

  " block cursor for insert
  " set guicursor=

  " Set neovim embedded terminal colors
  let g:terminal_color_0  = '#1e2132'
  let g:terminal_color_1  = '#e27878'
  let g:terminal_color_2  = '#b4be82'
  let g:terminal_color_3  = '#e2a478'
  let g:terminal_color_4  = '#84a0c6'
  let g:terminal_color_5  = '#a093c7'
  let g:terminal_color_6  = '#89b8c2'
  let g:terminal_color_7  = '#c6c8d1'
  let g:terminal_color_8  = '#6b7089'
  let g:terminal_color_9  = '#e98989'
  let g:terminal_color_10 = '#c0ca8e'
  let g:terminal_color_11 = '#e9b189'
  let g:terminal_color_12 = '#91acd1'
  let g:terminal_color_13 = '#ada0d3'
  let g:terminal_color_14 = '#95c4ce'
  let g:terminal_color_15 = '#d2d4de'

  set pumblend=20
  set wildoptions+=pum
endif

"" Appearance
set shortmess+=I
set belloff=all
set cmdheight=2
set concealcursor=nc
set conceallevel=2
set diffopt=internal,filler,algorithm:histogram,indent-heuristic,vertical
set display=lastline
set helplang=ja
set hidden
set hlsearch
set laststatus=2
set list listchars=tab:^\ ,trail:_,extends:>,precedes:<
set matchpairs+=<:>
set matchtime=1
set number
set pumheight=40
set scrolloff=5
set showtabline=2
set spellcapcheck=
set spelllang=en,cjk
set synmaxcol=300
set termguicolors
set guifont=SF\ Mono\ Square:h18
" set virtualedit=all
" set list listchars=tab:^\ ,trail:_,extends:>,precedes:<,eol:$

"" Indent
set autoindent
set backspace=indent,eol,start
set breakindent
set expandtab
set nostartofline
set shiftwidth=2
set smartindent
set tabstop=2

AutoCmd FileType * setlocal formatoptions-=ro
AutoCmd FileType * setlocal formatoptions+=jBn

"" viminfo
set viminfo='1000,:1000

"" Search & Complete
set ignorecase
set regexpengine=2
set smartcase

"" Completion
set completeopt=menu,menuone,noinsert,noselect

"" Command
set wildignorecase
set wildmenu
set wildmode=longest:full,full
set wrapscan

"" Folding
set foldcolumn=1
set nofoldenable
set foldmethod=manual

"" Split
set splitbelow
set splitright

"" FileType
set viewoptions=cursor,folds
set suffixesadd=.js,.ts,.rb

"" sign
set signcolumn=yes

"" Diff
AutoCmd InsertLeave * if &l:diff | diffupdate | endif

"" Undo
set undofile
if has('nvim')
  set undodir=~/.cache/nvim/undo/
else
  set undodir=~/.cache/vim/undo/
endif

"" Swap
set swapfile
set directory=~/.cache/vim/swap/

"" Term
set shell=/bin/zsh
set lazyredraw
set ttyfast
set ttimeout
set timeoutlen=750
set ttimeoutlen=10

if !has('nvim')
  set term=xterm-256color
endif

if $TERM ==# 'screen'
  set t_Co=256
endif

"" Session
set sessionoptions=buffers,tabpages,winsize

"" Automatically Disable Paste Mode
AutoCmd InsertLeave * setlocal nopaste

"" Misc
set autoread
set updatetime=500
AutoCmd FocusGained * checktime

"" Turn off default plugins.
let g:loaded_gzip              = 1
let g:loaded_tar               = 1
let g:loaded_tarPlugin         = 1
let g:loaded_zip               = 1
let g:loaded_zipPlugin         = 1
let g:loaded_rrhelper          = 1
let g:loaded_2html_plugin      = 1
let g:loaded_vimball           = 1
let g:loaded_vimballPlugin     = 1
let g:loaded_getscript         = 1
let g:loaded_getscriptPlugin   = 1
let g:loaded_netrw             = 1
let g:loaded_netrwPlugin       = 1
let g:loaded_netrwSettings     = 1
let g:loaded_netrwFileHandlers = 1
" }}}2
" }}}1

" Command & Function {{{1
" Move cursor last position {{{2
AutoCmd BufRead * if line("'\"") > 0 && line("'\"") <= line("$") | exe "normal g`\"" | endif
" }}}2

" highlight cursorline and cursorcolumn with timer {{{2
let g:highlight_cursor      = 1
let s:highlight_cursor_wait = 500

function! s:enter(...) abort
  if &filetype ==# 'list'
    return
  endif

  if g:highlight_cursor && get(b:, 'highlight_cursor', 1)
    setlocal cursorline cursorcolumn
  endif
  augroup highlight_cursor
    autocmd!
    autocmd CursorMoved,WinLeave * call <SID>leave()
  augroup END
endfunction

function! s:leave() abort
  setlocal nocursorline nocursorcolumn
  augroup highlight_cursor
    autocmd!
    autocmd CursorHold * call <SID>enter()
    autocmd WinEnter * call timer_start(<SID>highlight_cursor_wait, function('<SID>enter'))
  augroup END
endfunction

" AutoCmd VimEnter * call timer_start(<SID>highlight_cursor_wait, function('<SID>enter'))

function! s:cursor_highlight_toggle() abort
  if !exists('g:is_highlight_cursor') || g:is_highlight_cursor == 0
    let g:is_highlight_cursor = 1
    setlocal cursorline cursorcolumn
  else
    let g:is_highlight_cursor = 0
    setlocal nocursorline nocursorcolumn
  endif
endfunction

command! CursorHighlightToggle call <SID>cursor_highlight_toggle()
" }}}2

" Auto mkdir {{{2
AutoCmd BufWritePre * call <SID>auto_mkdir(expand('<afile>:p:h'), v:cmdbang)
function! s:auto_mkdir(dir, force) abort
  if !isdirectory(a:dir) && (a:force || input(printf('"%s" does not exist. Create? [y/N]', a:dir)) =~? '^y\%[es]$')
    call mkdir(a:dir, 'p')
  endif
endfunction
" }}}2

" Auto remove dust
AutoCmd BufWritePre * call <SID>remove_dust()
function! s:remove_dust()
  let cursor_point = getpos(".")
  execute ":%s/^ *$//ge"
  call setpos(".", cursor_point)
  unlet cursor_point
endfunction

" QuickfixToggle {{{2
function! s:quickfix_toggle() abort
  let _ = winnr('$')
  cclose
  if _ == winnr('$')
    botright copen
    " call g:Set_quickfix_keymap()
  endif
endfunction

command! QuickfixToggle call <SID>quickfix_toggle()
nnoremap <silent> <Space>q :<C-u>QuickfixToggle<CR>
" }}}2

" HighlightInfo {{{2
function! s:get_syn_id(transparent) abort
  let synid = synID(line('.'), col('.'), 1)
  return a:transparent ? synIDtrans(synid) : synid
endfunction

function! s:get_syn_name(synid) abort
  return synIDattr(a:synid, 'name')
endfunction

function! s:get_highlight_info() abort
  execute 'highlight ' . s:get_syn_name(s:get_syn_id(0))
  execute 'highlight ' . s:get_syn_name(s:get_syn_id(1))
endfunction

command! HighlightInfo call <SID>get_highlight_info()
" }}}2

" View JSON {{{2
command! JSON set ft=json | call CocAction('format')
" }}}2
" }}}1

" FileType Settings {{{1
" FileType {{{2
" Indent {{{3
AutoCmd FileType javascript      setlocal expandtab   shiftwidth=2 softtabstop=2 tabstop=2
AutoCmd FileType typescript      setlocal expandtab   shiftwidth=2 softtabstop=2 tabstop=2
AutoCmd FileType typescriptreact setlocal expandtab   shiftwidth=2 softtabstop=2 tabstop=2
AutoCmd FileType vue             setlocal expandtab   shiftwidth=2 softtabstop=2 tabstop=2
AutoCmd FileType ruby            setlocal expandtab   shiftwidth=2 softtabstop=2 tabstop=2
AutoCmd FileType eruby           setlocal expandtab   shiftwidth=2 softtabstop=2 tabstop=2
AutoCmd FileType python          setlocal expandtab   shiftwidth=4 softtabstop=4 tabstop=4
AutoCmd FileType go              setlocal noexpandtab shiftwidth=4 softtabstop=4 tabstop=4
AutoCmd FileType json            setlocal expandtab   shiftwidth=2 softtabstop=2 tabstop=2
AutoCmd FileType markdown        setlocal expandtab   shiftwidth=2 softtabstop=2 tabstop=2
AutoCmd FileType html            setlocal expandtab   shiftwidth=2 softtabstop=2 tabstop=2
AutoCmd FileType css             setlocal expandtab   shiftwidth=2 softtabstop=2 tabstop=2
AutoCmd FileType vim             setlocal expandtab   shiftwidth=2 softtabstop=2 tabstop=2
AutoCmd FileType sh              setlocal expandtab   shiftwidth=2 softtabstop=2 tabstop=2
AutoCmd FileType zsh             setlocal expandtab   shiftwidth=2 softtabstop=2 tabstop=2
" }}}3

" Fold {{{3
AutoCmd FileType javascript      setlocal foldmethod=syntax foldlevel=100
AutoCmd FileType typescript      setlocal foldmethod=syntax foldlevel=100
AutoCmd FileType typescriptreact setlocal foldmethod=syntax foldlevel=100
AutoCmd FileType ruby            setlocal foldmethod=syntax foldlevel=100
" }}}3

" iskeyword {{{3
AutoCmd FileType vue  setlocal iskeyword+=$ iskeyword+=& iskeyword+=- iskeyword+=? iskeyword-=/
AutoCmd FileType ruby setlocal iskeyword+=@ iskeyword+=! iskeyword+=? iskeyword+=&
AutoCmd FileType html setlocal iskeyword+=-
AutoCmd FileType css  setlocal iskeyword+=- iskeyword+=#
AutoCmd FileType vim  setlocal iskeyword+=-
AutoCmd FileType sh   setlocal iskeyword+=-
AutoCmd FileType zsh  setlocal iskeyword+=-
" }}}3
" }}}2

" Vim script {{{2
let g:vimsyn_embed = 'l'
" }}}2

" HTML & eruby {{{2
function! s:map_html_keys() abort
  inoremap <silent> <buffer> \\ \
  inoremap <silent> <buffer> \& &amp;
  inoremap <silent> <buffer> \< &lt;
  inoremap <silent> <buffer> \> &gt;
  inoremap <silent> <buffer> \- &#8212;
  inoremap <silent> <buffer> \<Space> &nbsp;
  inoremap <silent> <buffer> \` &#8216;
  inoremap <silent> <buffer> \' &#8217;
  inoremap <silent> <buffer> \" &#8221;
endfunction
AutoCmd FileType html,eruby call <SID>map_html_keys()
" }}}2

" Set quit {{{2
AutoCmd FileType qf   nnoremap <silent> <nowait> <buffer> q :<C-u>quit<CR>
AutoCmd FileType help nnoremap <silent> <nowait> <buffer> q :<C-u>quit<CR>
AutoCmd FileType diff nnoremap <silent> <nowait> <buffer> q :<C-u>quit<CR>
AutoCmd FileType man  nnoremap <silent> <nowait> <buffer> q :<C-u>quit<CR>
AutoCmd FileType git  nnoremap <silent> <nowait> <buffer> q :<C-u>quit<CR>
" }}}2
" }}}1

" Plugin Settings {{{1
" Eager Load {{{2
" altercmd {{{3
function! s:bulk_alter_command(original, altanative) abort
  if exists(':AlterCommand')
     execute 'AlterCommand ' . a:original . ' ' a:altanative
     execute 'AlterCommand <cmdwin> ' . a:original . ' ' a:altanative
  endif
endfunction

command! -nargs=+ BulkAlterCommand call <SID>bulk_alter_command(<f-args>)

if dein#tap('vim-altercmd')
  call altercmd#load()
  BulkAlterCommand ee     e!
  BulkAlterCommand co[de] VSCode
  BulkAlterCommand fo[rk] !fork
  BulkAlterCommand js[on] JSON
endif
" }}}3
" }}}2

" denops {{{2
" }}}2

" IDE {{{2
" coc {{{3
if dein#tap('coc.nvim')
  BulkAlterCommand or[ganizeimport] OrganizeImport
  BulkAlterCommand ma[rkdown]       CocMarkdownPreview

  let g:coc_global_extensions = [
  \ 'coc-deno',
  \ 'coc-eslint',
  \ 'coc-explorer',
  \ 'coc-git',
  \ 'coc-json',
  \ 'coc-lists',
  \ 'coc-markdown-preview-enhanced',
  \ 'coc-markdownlint',
  \ 'coc-marketplace',
  \ 'coc-python',
  \ 'coc-rust-analyzer',
  \ 'coc-sh',
  \ 'coc-sql',
  \ 'coc-tsserver',
  \ 'coc-yaml',
  \ ]

  if !dein#tap('fzf-preview.vim') && dein#tap('coc.nvim')
    call add(g:coc_global_extensions, 'coc-fzf-preview')
  endif

  " keymap
  nnoremap <silent> gh      :<C-u>call <SID>show_documentation()<CR>
  nnoremap <silent> <dev>R  :<C-u>CocRestart<CR>

  nmap     <silent> <dev>d  <Plug>(coc-definition)
  nnoremap <silent> <dev>md :<C-u>call CocActionAsync('jumpDefinition', 'tab drop')<CR>
  nnoremap <silent> <dev>mD :<C-u>call CocAction('jumpDefinition', 'vsplit')<CR>

  nmap     <silent> <dev>i  <Plug>(coc-implementation)
  nnoremap <silent> <dev>mi :<C-u>call CocActionAsync('jumpImplementation', 'tab drop')<CR>
  nnoremap <silent> <dev>mI :<C-u>call CocActionAsync('jumpImplementation', 'vsplit')<CR>

  nmap     <silent> <dev>t  <Plug>(coc-type-definition)
  nnoremap <silent> <dev>mt :<C-u>call CocActionAsync('jumpTypeDefinition', 'tab drop')<CR>
  nnoremap <silent> <dev>mT :<C-u>call CocActionAsync('jumpTypeDefinition', 'vsplit')<CR>

  nmap     <silent> <dev>k  <Plug>(coc-diagnostic-prev)
  nmap     <silent> <dev>j  <Plug>(coc-diagnostic-next)
  nmap     <silent> <dev>rn <Plug>(coc-rename)
  nmap     <silent> <dev>a  <Plug>(coc-codeaction-selected)iw
  nmap     <silent> <dev>A  <Plug>(coc-codeaction)
  nmap     <silent> <dev>l  <Plug>(coc-codelens-action)
  xmap     <silent> <dev>a  <Plug>(coc-codeaction-selected)
  nmap     <silent> <dev>f  <Plug>(coc-format)
  xmap     <silent> <dev>f  <Plug>(coc-format-selected)
  nmap     <silent> <dev>gs <Plug>(coc-git-chunkinfo)
  nmap     <silent> <dev>rf <Plug>(coc-references)

  nnoremap <silent> <expr> <C-d> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-d>"
  nnoremap <silent> <expr> <C-u> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-u>"
  inoremap <silent> <expr> <C-d> coc#float#has_scroll() ? "\<C-r>=coc#float#scroll(1)\<CR>" : "\<C-d>"
  inoremap <silent> <expr> <C-u> coc#float#has_scroll() ? "\<C-r>=coc#float#scroll(0)\<CR>" : "\<C-u>"

  nmap <silent> gp <Plug>(coc-git-prevchunk)
  nmap <silent> gn <Plug>(coc-git-nextchunk)

  command! CocMarkdownPreview CocCommand markdown-preview-enhanced.openPreview

  function! s:show_documentation() abort
    if index(['vim','help'], &filetype) >= 0
      execute 'h ' . expand('<cword>')
    elseif coc#rpc#ready()
      call CocActionAsync('doHover')
    endif
  endfunction

  function! s:coc_float() abort
    call coc#config('diagnostic.messageTarget', 'float')
    call coc#config('signature.target', 'float')
    call coc#config('coc.preferences.hoverTarget', 'float')
  endfunction

  function! s:coc_echo() abort
    call coc#config('diagnostic.messageTarget', 'echo')
    call coc#config('signature.target', 'echo')
    call coc#config('coc.preferences.hoverTarget', 'echo')
  endfunction

  command! CocFloat call <SID>coc_float()
  command! CocEcho  call <SID>coc_echo()

  function! s:coc_typescript_settings() abort
    setlocal tagfunc=CocTagFunc
    if <SID>is_deno()
      nmap <silent> <buffer> <dev>f <Plug>(coc-format)
    else
      nnoremap <silent> <buffer> <dev>f :<C-u>CocCommand eslint.executeAutofix<CR>:CocCommand prettier.formatFile<CR>
    endif
  endfunction

  function! s:coc_ts_ls_initialize() abort
    call coc#config('session.directory', '~/.cache/vim/sessions')
    if <SID>is_deno()
      call coc#config('tsserver.enable', v:false)
      call coc#config('deno.enable', v:true)
    else
      call coc#config('tsserver.enable', v:true)
      call coc#config('deno.enable', v:false)
    endif
  endfunction

  function! s:is_deno() abort
    if exists('s:is_deno_cache') && s:is_deno_cache
      return s:is_deno_cache
    endif

    if findfile('is_deno', getcwd() . '/.git') !=# '' || finddir('node_modules', getcwd()) ==# ''
      let s:is_deno_cache = v:true
      return v:true
    else
      let s:is_deno_cache = v:false
      return v:false
    endif
  endfunction

  function! s:coc_rust_settings() abort
    setlocal tagfunc=CocTagFunc
    nnoremap <silent> <buffer> gK :<C-u>CocCommand rust-analyzer.openDocs<CR>
  endfunction

  " AutoCmd CursorHold * silent call CocActionAsync('highlight')
  AutoCmd VimEnter * call <SID>coc_ts_ls_initialize()
  AutoCmd FileType typescript,typescriptreact call <SID>coc_typescript_settings()
  AutoCmd FileType rust call <SID>coc_rust_settings()
endif
" }}}3

" vimspector {{{3
if dein#tap('vimspector')
  let g:vimspector_enable_mappings = 'HUMAN'
  BulkAlterCommand dr[eset] VimspectorReset
endif
" }}}3
" }}}2

" Language {{{2
" fixjson {{{3
if dein#tap('vim-fixjson')
  let g:fixjson_fix_on_save = 0
endif
" }}}3

" json {{{3
if dein#tap('vim-json')
  let g:vim_json_syntax_conceal = 0
endif
" }}}3

" markdown {{{3
if dein#tap('vim-markdown')
  let g:vim_markdown_folding_disabled        = 1
  let g:vim_markdown_no_default_key_mappings = 1
  let g:vim_markdown_conceal                 = 0
  let g:vim_markdown_conceal_code_blocks     = 0
  let g:vim_markdown_auto_insert_bullets     = 0
  let g:vim_markdown_new_list_item_indent    = 0
endif
" }}}3

" rainbow_csv {{{3
if dein#tap('rainbow_csv')
  let g:disable_rainbow_key_mappings = 1
endif
" }}}3
" }}}2

" Fuzzy Finder {{{2
" fzf-preview & fzf {{{3
if dein#tap('fzf-preview.vim') || dein#tap('coc.nvim')
  AutoCmd VimEnter * call <SID>auto_mkdir(expand('~/.fzf'), v:cmdbang)
  AutoCmd FileType fzf let b:highlight_cursor = 0
  AutoCmd User fzf_preview#coc#initialized call <SID>fzf_preview_settings()

  " let g:fzf_preview_direct_window_option = 'botright 20new'
  " let g:fzf_preview_filelist_command    = 'fd --type file --hidden --exclude .git'
  let g:fzf_preview_filelist_command        = 'rg --files --hidden --follow --no-messages --glob "!.git/*" --glob \!"* *"'
  let g:fzf_preview_git_files_command       = 'git ls-files --exclude-standard | while read line; do if [[ ! -L $line ]] && [[ -f $line ]]; then echo $line; fi; done'
  let g:fzf_preview_directory_files_command = 'rg --files --hidden --follow --no-messages --glob "!.git/*/*" --glob \!"* *"'
  let g:fzf_preview_grep_cmd                = 'rg --line-number --no-heading --color=never --sort=path'
  let g:fzf_preview_mru_limit               = 5000
  let g:fzf_preview_use_dev_icons           = 1
  let g:fzf_preview_default_fzf_options     = {
  \ '--reverse': v:true,
  \ '--preview-window': 'wrap',
  \ '--bind': 'ctrl-d:preview-half-page-down,ctrl-u:preview-half-page-up,?:toggle-preview,ctrl-j:down,ctrl-k:up,ctrl-n:next-history,ctrl-p:previous-history'
  \ }

  let $FZF_PREVIEW_PLUGIN_HELP_ROOT_DIR = '~/.cache/vim/bundle/repos/github.com'
  let g:fzf_preview_history_dir         = '~/.fzf'

  nnoremap <fzf> <Nop>
  xnoremap <fzf> <Nop>
  nmap     ;       <fzf>
  xmap     ;       <fzf>

  " favorite
  nnoremap <silent> <fzf>;  :<C-u>CocCommand fzf-preview.FromResources directory mru mrw<CR>
  " project
  nnoremap <silent> <fzf>f  :<C-u>CocCommand fzf-preview.FromResources directory<CR>
  nnoremap <silent> <fzf>F  :<C-u>CocCommand fzf-preview.FromResources project<CR>
  " mru
  nnoremap <silent> <fzf>u  :<C-u>CocCommand fzf-preview.FromResources mru<CR>
  nnoremap <silent> <fzf>U  :<C-u>CocCommand fzf-preview.FromResources project_mru<CR>
  " mrw
  nnoremap <silent> <fzf>w  :<C-u>CocCommand fzf-preview.FromResources mrw<CR>
  nnoremap <silent> <fzf>W  :<C-u>CocCommand fzf-preview.FromResources project_mrw<CR>
  " other
  nnoremap <fzf>r           :<C-u>CocCommand fzf-preview.ProjectGrep<Space>
  xnoremap <fzf>r           "sy:CocCommand   fzf-preview.ProjectGrep<Space>-F<Space>"<C-r>=substitute(substitute(@s, '\n', '', 'g'), '/', '\\/', 'g')<CR>"
  nnoremap <silent> <fzf>R  :<C-u>CocCommand fzf-preview.ProjectGrepRecall --resume<CR>
  nnoremap <silent> <fzf>j  :<C-u>CocCommand fzf-preview.Jumps<CR>
  nnoremap <silent> <fzf>g; :<C-u>CocCommand fzf-preview.Changes<CR>
  nnoremap <silent> <fzf>/  :<C-u>CocCommand fzf-preview.Lines --add-fzf-arg=--no-sort --add-fzf-arg=--query="'"<CR>
  nnoremap <silent> <fzf>*  :<C-u>CocCommand fzf-preview.Lines --add-fzf-arg=--no-sort --add-fzf-arg=--query="'<C-r>=expand('<cword>')<CR>"<CR>
  nnoremap <silent> <fzf>q  :<C-u>CocCommand fzf-preview.QuickFix<CR>
  nnoremap <silent> <fzf>l  :<C-u>CocCommand fzf-preview.LocationList<CR>
  nnoremap <silent> <fzf>p  :<C-u>CocCommand fzf-preview.Yankround<CR>
  nnoremap <silent> <fzf>:  :<C-u>CocCommand fzf-preview.CommandPalette<CR>
  nnoremap <silent> <fzf>gg :<C-u>CocCommand fzf-preview.GitActions<CR>
  nnoremap <silent> <fzf>gs :<C-u>CocCommand fzf-preview.GitStatus<CR>
  " coc
  nnoremap <silent> <fzf>q  :<C-u>CocCommand fzf-preview.CocCurrentDiagnostics<CR>
  nnoremap <silent> <fzf>Q  :<C-u>CocCommand fzf-preview.CocDiagnostics<CR>
  nnoremap <silent> <fzf>rf :<C-u>CocCommand fzf-preview.CocReferences<CR>
  nnoremap <silent> <fzf>t  :<C-u>CocCommand fzf-preview.CocTypeDefinitions<CR>
  nnoremap <silent> <fzf>i  :<C-u>CocCommand fzf-preview.CocImplementations<CR>
  nnoremap <silent> <fzf>o  :<C-u>CocCommand fzf-preview.CocOutline<CR>

  if dein#tap('fzf.vim')
    nnoremap <silent> <fzf>m :Maps<CR>
    nnoremap <silent> <fzf>c :Commands<CR>
  endif

  BulkAlterCommand todo CocCommand<Space>fzf-preview.TodoComments
  BulkAlterCommand memo CocCommand<Space>fzf-preview.MemoList

  function! s:fzf_preview_settings() abort
    let g:fzf_preview_grep_preview_cmd = 'COLORTERM=truecolor ' . g:fzf_preview_grep_preview_cmd
    let g:fzf_preview_command = 'COLORTERM=truecolor ' . g:fzf_preview_command
    let g:fzf_preview_git_status_preview_command =  '[[ $(git diff --cached -- {-1}) != "" ]] && git diff --cached --color=always -- {-1} | delta || ' .
    \ '[[ $(git diff -- {-1}) != "" ]] && git diff --color=always -- {-1} | delta || ' .
    \ g:fzf_preview_command
  endfunction

endif
" }}}3
" }}}2

" Git {{{2
" blamer {{{3
if dein#tap('blamer.nvim')
  let g:blamer_enabled = 1
  let g:blamer_show_in_visual_modes = 0
endif
" }}}3

" gina {{{3
if dein#tap('gina.vim')
  BulkAlterCommand git   Gina
  BulkAlterCommand gina  Gina
  BulkAlterCommand gs    Gina<Space>status
  BulkAlterCommand gci   Gina<Space>commit<Space>--no-verify
  BulkAlterCommand gd    Gina<Space>diff
  BulkAlterCommand gdc   Gina<Space>diff<Space>--cached
  BulkAlterCommand gco   Gina<Space>checkout
  BulkAlterCommand log   Gina<Space>log
  BulkAlterCommand blame Gina<Space>blame

  AutoCmd VimEnter * call <SID>gina_settings()

  function! s:gina_settings() abort
    call gina#custom#command#option('status', '--short')
    call gina#custom#command#option('/\%(status\|commit\|branch\)', '--opener', 'split')
    call gina#custom#command#option('diff', '--opener', 'vsplit')
    call gina#custom#command#option('/\%(status\|changes\)', '--ignore-submodules')
    call gina#custom#command#option('status', '--branch')

    call gina#custom#mapping#nmap('status', '<C-c>', '<C-u>:Gina commit<CR>', {'silent': 1})

    call gina#custom#mapping#nmap('diff', '<CR>', '<Plug>(gina-diff-jump-vsplit)', {'silent': 1})

    call gina#custom#mapping#nmap('blame', '<C-r>', '<Plug>(gina-blame-redraw)', {'noremap': 1, 'silent': 1})
    call gina#custom#mapping#nmap('blame', 'j',     'j<Plug>(gina-blame-echo)')
    call gina#custom#mapping#nmap('blame', 'k',     'k<Plug>(gina-blame-echo)')

    call gina#custom#action#alias('/\%(blame\|log\|reflog\)', 'preview', 'topleft show:commit:preview')
    call gina#custom#mapping#nmap('/\%(blame\|log\|reflog\)', 'p',       ":<C-u>call gina#action#call('preview')<CR>", {'noremap': 1, 'silent': 1})

    call gina#custom#execute('/\%(ls\|log\|reflog\|grep\)',                 'setlocal noautoread')
    call gina#custom#execute('/\%(status\|branch\|ls\|log\|reflog\|grep\)', 'setlocal cursorline')

    call gina#custom#mapping#nmap('/\%(status\|commit\|branch\|ls\|log\|reflog\|grep\)', 'q', 'ZQ', {'nnoremap': 1, 'silent': 1})

    call gina#custom#mapping#nmap('log', 'yy', ":<C-u>call gina#action#call('yank:rev')<CR>", {'noremap': 1, 'silent': 1})
    call gina#custom#mapping#nmap('log', 'R',  ":<C-u>call gina#action#call('yank:rev')<CR>:FloatermNew git rebase -i <C-r>\"<CR>", {'noremap': 1, 'silent': 1})
  endfunction
endif
" }}}3

" gitsessions {{{3
if dein#tap('gitsessions.vim')
  BulkAlterCommand gss GitSessionSave
  BulkAlterCommand gsl GitSessionLoad

  let g:gitsessions_disable_auto_load = 1
endif
" }}}3
" }}}2

" filer {{{2
" coc-explorer {{{3
if dein#tap('coc.nvim')
  nnoremap <silent> <Space>e :<C-u>CocCommand explorer
  \ --width 30
  \ --toggle<CR>

" 開いているペインがcoc-explorerだけの場合はvimを閉じる
  autocmd BufEnter * if (winnr("$") == 1 && &ft =~ 'coc-explorer') | q | endif

  call coc#config('explorer.floating.border.enable', v:true)
  call coc#config('explorer.keyMappings.global', {
  \ 's': v:false,
  \ '<tab>': v:false,
  \ ',': 'actionMenu',
  \ })
endif
" }}}3
" }}}2

" textobj & operator {{{2
" operator-convert-case {{{3
if dein#tap('vim-operator-convert-case')
  nmap cy <Plug>(operator-convert-case-loop)
  xmap cy <Plug>(operator-convert-case-loop)
endif
" }}}3

" operator-replace {{{3
if dein#tap('vim-operator-replace')
  nmap _ <Plug>(operator-replace)
  xmap _ <Plug>(operator-replace)
  omap _ <Plug>(operator-replace)
endif
" }}}3

" swap {{{3
if dein#tap('vim-swap')
  omap i, <Plug>(swap-textobject-i)
  xmap i, <Plug>(swap-textobject-i)
  omap a, <Plug>(swap-textobject-a)
  xmap a, <Plug>(swap-textobject-a)
endif
" }}}3

" textobj-cursorcontext {{{3
if dein#tap('vim-textobj-cursorcontext')
  let g:textobj_cursorcontext_no_default_key_mappings = 1
  omap ic <Plug>(textobj-cursorcontext-i)
  omap ac <Plug>(textobj-cursorcontext-a)
  xmap ic <Plug>(textobj-cursorcontext-i)
  xmap ac <Plug>(textobj-cursorcontext-a)
endif
" }}}3

" textobj-entire {{{3
if dein#tap('vim-textobj-entire')
  let g:textobj_entire_no_default_key_mappings = 1
  omap ie <Plug>(textobj-entire-i)
  omap ae <Plug>(textobj-entire-a)
  xmap ie <Plug>(textobj-entire-i)
  xmap ae <Plug>(textobj-entire-a)
endif
" }}}3

" textobj-functioncall {{{3
if dein#tap('vim-textobj-functioncall')
  let g:textobj_functioncall_no_default_key_mappings = 1
  omap if <Plug>(textobj-functioncall-i)
  omap af <Plug>(textobj-functioncall-a)
  xmap if <Plug>(textobj-functioncall-i)
  xmap af <Plug>(textobj-functioncall-a)
endif
" }}}3

" textobj-line {{{3
if dein#tap('vim-textobj-line')
  let g:textobj_line_no_default_key_mappings = 1
  omap il <Plug>(textobj-line-i)
  omap al <Plug>(textobj-line-a)
  xmap il <Plug>(textobj-line-i)
  xmap al <Plug>(textobj-line-a)
endif
" }}}3

" textobj-url {{{3
if dein#tap('vim-textobj-url')
  let g:textobj_url_no_default_key_mappings = 1
  omap iu <Plug>(textobj-url-i)
  omap au <Plug>(textobj-url-a)
  xmap iu <Plug>(textobj-url-i)
  xmap au <Plug>(textobj-url-a)
endif
" }}}3
" }}}2

" Edit & Move & Search {{{2
" hlslens & asterisk & anzu {{{3
if dein#tap('nvim-hlslens') &&
   \ dein#tap('vim-asterisk') &&
   \ dein#tap('vim-anzu')

  if has('nvim')
    lua require('hlslens').setup({auto_enable = true})
    nmap <silent> n  :<C-u>execute('normal! ' . v:count1 . 'n')<CR>:lua require('hlslens').start()<CR><Plug>(anzu-update-search-status)zzzv
    nmap <silent> N  :<C-u>execute('normal! ' . v:count1 . 'N')<CR>:lua require('hlslens').start()<CR><Plug>(anzu-update-search-status)zzzv
    nmap <silent> *  <Plug>(asterisk-z*):lua require('hlslens').start()<CR><Plug>(anzu-update-search-status)
    xmap <silent> *  <Plug>(asterisk-z*):lua require('hlslens').start()<CR><Plug>(anzu-update-search-status)
    nmap <silent> #  <Plug>(asterisk-z#):lua require('hlslens').start()<CR><Plug>(anzu-update-search-status)
    xmap <silent> #  <Plug>(asterisk-z#):lua require('hlslens').start()<CR><Plug>(anzu-update-search-status)
    nmap <silent> g* <Plug>(asterisk-gz*):lua require('hlslens').start()<CR><Plug>(anzu-update-search-status)
    xmap <silent> g* <Plug>(asterisk-gz*):lua require('hlslens').start()<CR><Plug>(anzu-update-search-status)
    nmap <silent> g# <Plug>(asterisk-gz#):lua require('hlslens').start()<CR><Plug>(anzu-update-search-status)
    xmap <silent> g# <Plug>(asterisk-gz#):lua require('hlslens').start()<CR><Plug>(anzu-update-search-status)
  endif
endif
" }}}3

" easy-align {{{3
if dein#tap('vim-easy-align')
  xmap ga <Plug>(EasyAlign)

  let g:easy_align_delimiters = {
  \ '>': {
  \   'pattern':       '===\|<=>\|=\~[#?]\?\|=>\|[:+/*!%^=><&|.-?]*=[#?]\?\|[-=]>\|<[-=]',
  \   'left_margin':   0,
  \   'right_margin':  0,
  \   'stick_to_left': 1,
  \ },
  \ '/': {
  \   'pattern':         '//\+\|/\*\|\*/',
  \   'left_margin':     1,
  \   'right_margin':    1,
  \   'stick_to_left':   0,
  \   'delimiter_align': 'l',
  \   'ignore_groups':   ['!Comment']
  \ },
  \ ']': {
  \   'pattern':       '[[\]]',
  \   'left_margin':   0,
  \   'right_margin':  0,
  \   'stick_to_left': 0,
  \  },
  \ ')': {
  \   'pattern':       '[()]',
  \   'left_margin':   0,
  \   'right_margin':  0,
  \   'stick_to_left': 0,
  \ },
  \ '#': {
  \   'pattern':       '#',
  \   'left_margin':   1,
  \   'right_margin':  1,
  \   'stick_to_left': 0,
  \   'ignore_groups': ['String'],
  \ },
  \ '"': {
  \   'left_margin':   1,
  \   'right_margin':  1,
  \   'stick_to_left': 0,
  \   'pattern':       '"',
  \   'ignore_groups': ['String'],
  \ },
  \ ';': {
  \   'pattern':       ';',
  \   'left_margin':   0,
  \   'right_margin':  1,
  \   'stick_to_left': 1,
  \ }
  \ }
endif
" }}}3

" eft {{{3
if dein#tap('vim-eft')
  let g:eft_enable = 0
  nnoremap <Space>f :<C-u>EftToggle<CR>

  function! s:eft_toggle() abort
    if g:eft_enable == 1
      let g:eft_enable = 0
      call <SID>eft_disable()
    else
      let g:eft_enable = 1
      call <SID>eft_enable()
    endif
  endfunction
  command! EftToggle call <SID>eft_toggle()

  function! s:eft_enable() abort
    nmap ;; <Plug>(eft-repeat)
    xmap ;; <Plug>(eft-repeat)

    nmap f <Plug>(eft-f)
    xmap f <Plug>(eft-f)
    omap f <Plug>(eft-f)
    nmap F <Plug>(eft-F)
    xmap F <Plug>(eft-F)
    omap F <Plug>(eft-F)

    " nmap t <Plug>(eft-t)
    xmap t <Plug>(eft-t)
    omap t <Plug>(eft-t)
    " nmap T <Plug>(eft-T)
    xmap T <Plug>(eft-T)
    omap T <Plug>(eft-T)
  endfunction

  function! s:eft_disable() abort
    nnoremap ;; ;
    nnoremap ;; ;

    nunmap f
    xunmap f
    ounmap f
    nunmap F
    xunmap F
    ounmap F

    xunmap t
    ounmap t
    xunmap T
    ounmap T
  endfunction

  " AutoCmd VimEnter * call <SID>eft_enable()
endif
" }}}3

" expand-region {{{3
if dein#tap('vim-expand-region')
  let g:expand_region_text_objects = {
  \ 'iw': 0,
  \ 'i"': 1,
  \ 'a"': 1,
  \ "i'": 1,
  \ "a'": 1,
  \ "i`": 1,
  \ "a`": 1,
  \ 'i(': 1,
  \ 'a(': 1,
  \ 'i[': 1,
  \ 'a[': 1,
  \ 'i{': 1,
  \ 'if': 1,
  \ 'af': 1,
  \ 'ig': 1,
  \ 'ag': 1,
  \ 'i$': 1,
  \ 'a$': 1,
  \ 'a{': 1,
  \ 'i<': 1,
  \ 'a<': 1,
  \ 'iu': 1,
  \ 'au': 1,
  \ 'il': 0,
  \ 'ii': 1,
  \ 'ai': 1,
  \ 'ic': 0,
  \ "ac": 0,
  \ 'ie': 0,
  \ }
  xmap v <Plug>(expand_region_expand)
  xmap V <Plug>(expand_region_shrink)
endif
" }}}3

" edgemotion {{{3
if dein#tap('vim-edgemotion')
  nmap <silent> <Space>j <Plug>(edgemotion-j)
  nmap <silent> <Space>k <Plug>(edgemotion-k)
  xmap <silent> <Space>j <Plug>(edgemotion-j)
  xmap <silent> <Space>k <Plug>(edgemotion-k)
  omap <silent> <Space>j <Plug>(edgemotion-j)
  omap <silent> <Space>k <Plug>(edgemotion-k)
endif
" }}}3

" jplus {{{3
if dein#tap('vim-jplus')
  nmap <silent> J         <Plug>(jplus)
  xmap <silent> J         <Plug>(jplus)
  nmap <silent> <Space>J <Plug>(jplus-input)
  xmap <silent> <Space>J <Plug>(jplus-input)
endif
" }}}3

" numb {{{3
if dein#tap('numb.nvim')
lua << EOF
require('numb').setup()
EOF
endif
" }}}3

" textmanip {{{3
if dein#tap('vim-textmanip')
  xmap <C-j> <Plug>(textmanip-move-down)
  xmap <C-k> <Plug>(textmanip-move-up)
  xmap <C-h> <Plug>(textmanip-move-left)
  xmap <C-l> <Plug>(textmanip-move-right)
endif
" }}}3

" yankround {{{3
if dein#tap('yankround.vim')
  let g:yankround_max_history   = 10000
  let g:yankround_use_region_hl = 1
  let g:yankround_dir           = '~/.cache/vim/yankround'
  nmap p <Plug>(yankround-p)
  xmap p <Plug>(yankround-p)
  nmap P <Plug>(yankround-P)
  nmap <silent> <expr> <C-p> yankround#is_active() ? "\<Plug>(yankround-prev)" : "(ctrlp)"
  nmap <silent> <expr> <C-n> yankround#is_active() ? "\<Plug>(yankround-next)" : ""
endif
" }}}3
" }}}2

" Appearance {{{2
" vim-cursorword {{{3
if dein#tap('vim-cursorword')
  let g:cursorword_delay = 600
  let g:cursorword_highlight = 0
endif
" }}}3

" highlightedyank {{{3
if dein#tap('vim-highlightedyank')
  let g:highlightedyank_highlight_duration = 300
endif
" }}}3

" indent-line {{{3
if dein#tap('indentLine')
  let g:indentLine_enabled = 0
  let g:indentLine_fileTypeExclude = ['json', 'defx', 'fern']
endif
" }}}3

" lightline {{{3
execute 'source' g:vimrc_dir . '/config/lightline.vim'
" }}}3

" nvim-colorizer {{{3
if dein#tap('nvim-colorizer.lua')
  lua require('colorizer').setup()
endif
" }}}3

" smartnumber {{{3
if dein#tap('smartnumber.vim')
  let g:snumber_enable_startup = 1
  let g:snumber_enable_relative = 1
  nnoremap <Space>n :<C-u>SNToggle<CR>

  function! s:snumber_relative_toggle() abort
    if g:snumber_enable_relative == 1
      windo SNumbersTurnOffRelative
      let g:snumber_enable_relative = 0
    else
      windo SNumbersTurnOnRelative
      let g:snumber_enable_relative = 1
    endif
  endfunction

  command! SNToggle call <SID>snumber_relative_toggle()
endif
" }}}3
" }}}2

" Util {{{2
" aho-bakaup {{{3
if dein#tap('aho-bakaup.vim')
  let g:bakaup_auto_backup = 1
  let g:bakaup_backup_dir  = expand('~/.cache/vim/backup')
endif
" }}}3

" capture {{{3
if dein#tap('capture.vim')
  BulkAlterCommand cap[ture] Capture
  AutoCmd FileType capture nnoremap <silent> <buffer> q :<C-u>quit<CR>
endif
" }}}3

" floaterm {{{3
if dein#tap('vim-floaterm')
  let g:floaterm_width       = 0.8
  let g:floaterm_height      = 0.8
  let g:floaterm_winblend    = 15
  let g:floaterm_position    = 'center'

  nnoremap <silent> <C-s> :<C-u>FloatermToggle<CR>

  AutoCmd FileType floaterm call <SID>floaterm_settings()
  AutoCmd FileType gitrebase call <SID>set_git_rebase_settings()

  function! s:floaterm_settings() abort
    tnoremap <silent> <buffer> <C-s> <C-\><C-n>:FloatermToggle<CR>
    let b:highlight_cursor = 0
  endfunction

  function! s:set_git_rebase_settings() abort
    set winhighlight=Normal:GitRebase
    set winblend=30

    nnoremap <silent> <buffer> <Space>d :bdelete!<Space><Bar><Space>close<CR>
  endfunction
endif
" }}}3

" memolist {{{3
if dein#tap('memolist.vim')
  let g:memolist_path = '~/.cache/vim/memolist'
endif
" }}}3

" undotree {{{3
if dein#tap('undotree')
  nnoremap <silent> <Space>u :<C-u>UndotreeToggle<CR>
endif
" }}}3

" wilder {{{3
if dein#tap('wilder.nvim')
  function! SetUpWilder() abort
    let wilder_cmd_line_renderer = wilder#popupmenu_renderer({
    \ 'winblend': 20,
    \ 'highlighter': wilder#basic_highlighter(),
    \ 'left': [wilder#popupmenu_devicons(), wilder#popupmenu_buffer_flags({'flags': ' '})],
    \ 'right': [' ', wilder#popupmenu_scrollbar()],
    \ })
    let wilder_search_renderer = wilder#wildmenu_renderer({
    \ 'highlighter': wilder#basic_highlighter(),
    \ 'separator': '  ',
    \ 'left': [' '],
    \ 'right': [' ', wilder#wildmenu_index()],
    \ })
    " /時にハイライトがちらつくので無効化
    " let wilder_search_renderer = wilder#wildmenu_renderer(wilder#wildmenu_lightline_theme({
    "\ 'highlights': {},
    "\ 'highlighter': wilder#basic_highlighter(),
    "\ 'separator': ' · ',
    "\ 'left': [''],
    "\ 'right': [' ', wilder#wildmenu_index()],
    "\ }))

    call wilder#setup({
    \ 'modes': [':', '/', '?'],
    \ 'next_key': '<C-j>',
    \ 'previous_key': '<C-k>',
    \ 'accept_key': '<C-e>',
    \ })

    call wilder#set_option(
    \ 'renderer',
    \ wilder#renderer_mux({
    \ ':': wilder_cmd_line_renderer,
    \ '/': wilder_search_renderer,
    \ '?': wilder_search_renderer,
    \ 'substitute': wilder_search_renderer,
    \ })
    \ )
  endfunction
endif
" }}}3

" }}}2

" Combination Settings {{{2
function! s:esc_esc() abort
  if dein#tap('vim-anzu')
    AnzuClearSearchStatus
  endif

  if dein#tap('coc.nvim')
    call coc#float#close_all()
  endif
endfunction

command! EscEsc call <SID>esc_esc()
nnoremap <silent> <Esc><Esc> :<C-u>nohlsearch<CR>:EscEsc<CR>
" }}}2
" }}}1

" Load Colorscheme {{{1
execute 'source' g:vimrc_dir . '/config/hilight.vim'
" }}}1

" vim:set expandtab shiftwidth=2 softtabstop=2 tabstop=2 foldenable foldmethod=marker:
