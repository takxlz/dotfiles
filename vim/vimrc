" init config
" plug config
" basic config
" filetype config
" keymap config
" plugin config
" finish config

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" :init config  {{{
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" このファイルの場所を定義（以降、この変数を使用する）
let g:vimrc_dir = expand('<sfile>:p:h')
" }}}



""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" :plug config  {{{
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
call plug#begin('~/.cache/plugged')
    Plug 'joshdick/onedark.vim'  " lightlineのテーマで使用
    Plug 'morhetz/gruvbox'
    Plug 'dhruvasagar/vim-table-mode', { 'on': 'TableModeToggle' }
    Plug 'gorodinskiy/vim-coloresque', { 'on': [] }  " cursorcolumnが有効だと重い（forロードが動作しないためautocmdでロード）
    Plug 'junegunn/vim-easy-align', { 'on': '<Plug>(EasyAlign)' }
    Plug 'neoclide/coc.nvim', {'branch': 'release'}
    Plug 'liuchengxu/vista.vim'
    Plug 'preservim/nerdtree', { 'on': 'NERDTreeToggle' }
    Plug 'Xuyuanp/nerdtree-git-plugin', { 'on': 'NERDTreeToggle' }
    Plug 'puremourning/vimspector', { 'on': '<Plug>Vimspector' }
    Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
    Plug 'prettier/vim-prettier', { 'do': 'npm install', 'for': ['javascript', 'typescript', 'typescript.tsx', 'css', 'html', 'json'] }
    Plug 'junegunn/fzf.vim'
    Plug 'easymotion/vim-easymotion'
    Plug 'vim-python/python-syntax'
    Plug 'LeafCage/foldCC.vim'
    Plug 'Yggdroot/indentline'
    Plug 'airblade/vim-gitgutter'
    Plug 'itchyny/lightline.vim'
    Plug 'itchyny/vim-parenmatch'
    Plug 'kana/vim-submode'
    Plug 'kana/vim-textobj-user'
    Plug 'kana/vim-operator-user'
    Plug 'kana/vim-operator-replace'  " kana/vim-operator-userに依存 (_)
    Plug 'kana/vim-textobj-indent'  " kana/vim-textobj-userに依存 (i)
    Plug 'kana/vim-textobj-entire'  " kana/vim-textobj-userに依存 (e)
    Plug 'thinca/vim-textobj-between'  " kana/vim-textobj-userに依存 (f)
    Plug 'Julian/vim-textobj-variable-segment'  " kana/vim-textobj-userに依存 (v)
    Plug 'tpope/vim-surround'  " (s)
    Plug 'tpope/vim-commentary'  " (gc)
    Plug 'tpope/vim-fugitive'
    Plug 'tpope/vim-repeat'
    Plug 'APZelos/blamer.nvim'
    Plug 'kshenoy/vim-signature'
    " Plug 'alvan/vim-closetag'
    " Plug 'jiangmiao/auto-pairs'
call plug#end()


" ------------------------------
" post-plug config
syntax on
filetype on
filetype plugin indent on  " filetypeが変更されたときにfiletype用のプラグイン/インデント設定を自動ロードする
set encoding=utf-8  " ※プラグイン（lightline）の読み込みより後に設定する
" }}}



""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" :basic config  {{{
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" デフォルトプラグインの無効化
execute 'source' g:vimrc_dir . '/rc/disable_default_plugin.vim'


"  カラースキーム
set t_Co=256
set background=dark
colorscheme gruvbox
" let g:onedark_termcolors=256
" colorscheme onedark
hi Normal ctermbg=NONE  " カラースキームを適用していてもターミナルの背景色に合わせる


" その他オプション
set shortmess+=I  " オープニングメッセージを非表示
set number  " 行番号を表示
set relativenumber  " 行番号を相対表示
set cursorline  " カレント行をハイライト
set cursorcolumn  " カレント列をハイライト
" set showtabline=2  " タブラインを常に表示
set shellslash  " windowsでのディレクトリ区切り文字を「/」にする
" set autochdir  " 自動で開いたファイルの場所に移動
set nrformats=  " 数値の形式を10進数にする（デフォルトは8進数）
set whichwrap=<,>,[,]  " 左矢印で上行末、右矢印で下行頭に移動する
set conceallevel=0  " mdで_等が隠れるのを無効化(indentlineが設定を上書きしてしまうのでindentlineの設定でmdとhelpを除外する)
set wildmenu  " コマンドの補完
set history=5000  " コマンドのヒストリの変更
set showcmd  " 入力中のコマンドを右下に表示
set list  " 不可視文字を表示
set listchars=tab:>-,trail:_  " タブを>-で表示
set timeout timeoutlen=1000 ttimeoutlen=0  " キーバインドの待機時間の設定
set updatetime=200  " vimでのプラグインなどの反映時間
set fillchars=vert:\|,fold:\ ,diff:-  " 縦分割「|」、フォールディンを「 」、diffを「-」に変更
set splitbelow  " ウィンドウを横分割したときにカーソルを下に移動する
set splitright  " ウィンドウを立て分割したときにカーソルを右に移動する
hi VertSplit gui=NONE guifg=gray30 guibg=NONE cterm=NONE ctermfg=darkgray ctermbg=NONE  " ペイン分割したときのペイン境界線の色を指定


" フォールディングの設定
set foldmethod=marker
set foldtext=FoldCCtext()  " フォールディング文字列をLeafCage/foldCC.vimの文字列にする
set commentstring=%s
let g:vim_markdown_folding_disabled=1  " mdを自動で折り畳まないようにする
set fillchars=vert:\|,fold:\ ,diff:-  " 縦分割「|」、フォールディングを「 」、diffを「-」に変更
hi Folded gui=NONE term=standout ctermbg=darkgray ctermfg=NONE guibg=gray23 guifg=NONE  " フォールディング行の色


" 「~/.cache/vim_tmpfiles」がない場合は作成する
if !isdirectory(expand('~/.cache/vim_tmpfiles')) | call mkdir(expand('~/.cache/vim_tmpfiles'), 'p') | endif


" macとunixだけの設定
if has('mac') || has('unix')
    set mouse=a  " マウス・トラックパッドを有効化
    set backspace=indent,eol,start  " BSの設定(ターミナルではBSが効かないことがある)
endif


" nvimとvimの設定の違いは以下に記述
if has('nvim')
    set mouse=a
    set clipboard=unnamed
else
    set directory=~/.cache/vim_tmpfiles/
    set backupdir=~/.cache/vim_tmpfiles/
    set viminfo+=n~/.cache/vim_tmpfiles/.viminfo
    set undodir=~/.cache/vim_tmpfiles/
    set clipboard=unnamed,autoselect
endif


" 空行の空白を削除する（保存時の直前）
augroup basic__remove_dust
    autocmd!
    autocmd BufWritePre * call takxlz#util#remove_dust()
augroup END


" 外部であった変更を反映する
augroup basic__update_file
    autocmd!
    autocmd FocusGained,WinEnter,InsertEnter * checktime
augroup END
" }}}



""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" :filetype config  {{{
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" 下記の違いに気をつける
" autocmd FileType html ~
" autocmd BufRead *.html ~

" general
augroup filetype__general
    autocmd!
    set autoindent
    set smartindent  " 末尾の文字に合わせてインデントを増減する
    set expandtab  " タブキーによるソフトタブを有効化
    set tabstop=4
    set softtabstop=4  " 連続した空白に対してBSなどでカーソルが動く量
    set shiftwidth=4  " オートインデント時のインデント量
augroup END


" vim
augroup filetype__vim
    autocmd!
    autocmd FileType vim setlocal commentstring=\"\ %s
augroup END


" python
augroup filetype__python
    autocmd!
    " 使用するpythonの場所を指定
    if has('mac') || has('unix')
        let g:python3_host_prog=exepath('python3')
    else
        " let g:python3_host_prog=expand('~/AppData/Local/Programs/Python/Python35/python')
        let g:python3_host_prog=exepath('python')  " winではpythonとpython3はpythonというコマンドなので3はつけなくていい
        " kaoriya版vimはpython3.5以外だとdllが見つけられずエラーになるので，直接dllの場所を指定する
        if !has('nvim') | set pythonthreedll=~/AppData/Local/Programs/Python/Python38/python38.dll | endif
    endif
augroup END


" ruby
augroup filetype__ruby
    autocmd!
    autocmd BufNewFile,BufRead *.rb setlocal tabstop=2 softtabstop=2 shiftwidth=2
augroup END


" json
augroup filetype__json
    autocmd!
    autocmd BufNewFile,BufRead *.json setlocal tabstop=2 softtabstop=2 shiftwidth=2
augroup END


" html
augroup filetype__html
    autocmd!
    autocmd BufNewFile,BufRead *.html setlocal tabstop=2 softtabstop=2 shiftwidth=2
augroup END


" css
augroup filetype__css
    autocmd!
    autocmd BufNewFile,BufRead *.css setlocal tabstop=2 softtabstop=2 shiftwidth=2
augroup END


" toml
augroup filetype__toml
    autocmd!
    autocmd BufNewFile,BufRead *.toml setlocal filetype=toml
augroup END


" javascript
augroup filetype__js
    autocmd!
    autocmd BufNewFile,BufRead *.js setlocal tabstop=2 softtabstop=2 shiftwidth=2
augroup END


" typescript-tsx
augroup filetype__tsx
    autocmd!
    autocmd BufNewFile,BufRead *.tsx setlocal filetype=typescript.tsx
    autocmd BufNewFile,BufRead *.ts setlocal tabstop=2 softtabstop=2 shiftwidth=2
    autocmd BufNewFile,BufRead *.tsx setlocal tabstop=2 softtabstop=2 shiftwidth=2
augroup END
" }}}



""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" :keymap config  {{{
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" +------------------------------------+
" |        mode      |   no_re  |  re  |
" |------------------------------------|
" | normal  + visual | noremap  | map  |
" | command + insert | noremap! | map! |
" |       normal     | nnoremap | nmap |
" |       visua      | vnoremap | vmap |
" |      command     | cnoremap | cmap |
" |       insert     | inoremap | imap |
" +------------------------------------+

" submode
" [submode#enter_with]でサブモードを作成する
"   1:作成するサブモード名、2:対象モード(n,i,ni)、3:オプション(リマップするときは[r])、4:サブモードに入るキーバインド、5:サブモードに入った際に行う処理
" [submode#map]で作成したサブモード内でのキーバインドの定義する
"   第1～3引数までは、enter_withと同じ、4:afterキーバインド、5:beforeキーバインド

" vim固有の機能を割り当てるプレフィックス
nnoremap [core] <Nop>
nnoremap s <Nop>
nmap s [core]


" escape
augroup keymap__escape
    autocmd!
    " escをjjにマッピング
    inoremap jj <ESC>

    " terminal-insertからterminal-normalに抜ける
    tnoremap jj <C-\><C-n>
augroup END


" カーソル移動
augroup keymap__move_cursor
    autocmd!
    " カーソル移動を表示行単位にする
    nnoremap j gj
    nnoremap k gk
    nnoremap <Down> g
    nnoremap <Up> gk

    " インサートモード時のカーソル移動を追加
    inoremap <C-j> <Down>
    inoremap <C-k> <Up>
    inoremap <C-h> <Left>
    inoremap <C-l> <Right>

    " カーソル移動を早くする
    nnoremap J 10j
    nnoremap K 10k
augroup END


" ペースト
augroup keymap__paste
    autocmd!
    " ヤンクレジストリからペーストC-pに設定
    nnoremap <C-p> "0p
augroup END


" レジストリ
augroup keymap__registry
    autocmd!
    " xとsではヤンクしない(_レジスタは消去用レジスタ)
    nnoremap x "_x
    " nnoremap s "_s
augroup END


" 改行
augroup keymap__new_line
    autocmd!
    " 空行で改行しても、インデントのスペースを削除しない
    nnoremap o oX<C-h>
    nnoremap O OX<C-h>
    inoremap <CR> <CR>X<C-h>

    " 改行のときの自動コメントを無効化
    autocmd FileType * setlocal formatoptions-=ro

    " インデントを維持したまま、カーソル下に行を挿入し、その行に移動
    nnoremap <C-j> oX<C-h><ESC>

    " インデントを維持しないで、カーソル下に行を挿入し、その行に移動
    nnoremap <silent> <C-k> :<C-u>call append(expand('.'), '')<CR>j

    " カーソル位置に改行を挿入(カーソル右は折り返される)
    nnoremap <CR> i<CR><ESC>
augroup END


" 行移動
augroup keymap__move_line
    autocmd!
    " 行を移動
    nnoremap <C-Up> "zdd<Up>"zP
    nnoremap <C-Down> "zdd"zp

    " 複数行を移動
    vnoremap <C-Up> "zx<Up>"zP`[V`]
    vnoremap <C-Down> "zx"zp`[V`]
augroup END


" トグル
augroup keymap__toggle
    autocmd!
    nnoremap <silent> <;>(toggle_relative_num) :<C-u>setlocal relativenumber!<CR>
    nnoremap <silent> <;>(toggle_cursor_column) :<C-u>setlocal cursorcolumn!<CR>
augroup END


" ハイライト
augroup keymap__highlight
    autocmd!
    " カーソル下の単語をハイライト
    " nnoremap <silent> [core]<space><space> "zyiw:let @/ = '\<' . @z . '\>'<CR>:set hlsearch<CR>
    nnoremap <silent> [core]<space><space> :call takxlz#util#hilight_words()<CR>:set hlsearch<CR>
    nnoremap <silent> [core]<space>s :let g:hlstate = ''<CR>:let @/ = ''<CR>
augroup END


" ペイン
augroup keymap__pane
    autocmd!
    " ペイン分割
    nnoremap <silent> [core]s :<C-u>sp<CR>
    nnoremap <silent> [core]v :<C-u>vs<CR>

    " ペイン移動
    nnoremap [core]j <C-w>j
    nnoremap [core]k <C-w>k
    nnoremap [core]l <C-w>l
    nnoremap [core]h <C-w>h

    " ペイン自体を移動
    nnoremap [core]J <C-w>J
    nnoremap [core]K <C-w>K
    nnoremap [core]L <C-w>L
    nnoremap [core]H <C-w>H

    " 大きさを揃える
    nnoremap [core]= <C-w>=

    " ペインの最大化トグル
    let g:takxlz_is_maximize = 0
    nnoremap <silent> [core]z :call takxlz#util#toggle_maximize_window()<CR>

    " ペインを閉じる、バッファを閉じる
    nnoremap <silent> [core]q :<C-u>q<CR>
    nnoremap <silent> [core]Q :<C-u>bd<CR>

    " s>...でw幅を増やす、s<...でw幅を減らす
    " s+...でw高さを増やす、s-...でw高さを減らす
    call submode#enter_with('bufmove', 'n', '', '[core]>', '<C-w>>')
    call submode#enter_with('bufmove', 'n', '', '[core]<', '<C-w><')
    call submode#enter_with('bufmove', 'n', '', '[core]+', '<C-w>+')
    call submode#enter_with('bufmove', 'n', '', '[core]-', '<C-w>-')
    call submode#map('bufmove', 'n', '', '>', '<C-w>>')
    call submode#map('bufmove', 'n', '', '<', '<C-w><')
    call submode#map('bufmove', 'n', '', '+', '<C-w>+')
    call submode#map('bufmove', 'n', '', '-', '<C-w>-')
augroup END


" タブ
augroup keymap__tab
    " 新規タブ
    nnoremap <silent> [core]t :<C-u>tabnew<CR>

    " 次のタブ、前のタブに移動
    nnoremap [core]n gt
    nnoremap [core]p gT

    " 現在のタブを閉じる
    nnoremap <silent> [core]c :tabclose<CR>

    " 現在のタブ以外を閉じる
    nnoremap <silent> [core]C :tabonly<CR>
augroup END


" フォールディング
augroup keymap__fold
    autocmd!
    " プレフィックスキーを設定
    noremap [fold] <Nop>
    map <space>a [fold]

    " カーソル下の折りたたみを1段階トグル
    nnoremap [core]a za

    " カーソル下の折りたたみを全てトグル
    nnoremap [core]A zA

    " 全ての折りたたみを開く
    nnoremap [core]o zR

    " 全ての折りたたみを閉じる
    nnoremap [core]O zM

    " 選択範囲にマーカーを埋め込む(vモードで[fold]が反応しなかったので直接<space>を書く)
    "noremap <silent> <space>fm zf
    noremap [core]m zf

    " カーソル下の折りたたみマーカーを削除
    nnoremap [core]d zd
augroup END
" }}}



""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" :plugin config  {{{
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" プラグインのキーマップは基本的に<space>をプレフィックスとする
" プラグインによっては利便性等を考慮して<space>を設定しないものもある（vim-commentary[gc]など）

" よく使うプラグイン機能のプレフィックスを「m」にする
nnoremap [useful] <Nop>
nnoremap m <Nop>
nnoremap [core]m m
nmap m [useful]


" vim-table-mode
augroup plugin__vim_table_mode
    autocmd!
    let g:table_mode_corner = '|'

    noremap <silent> <space>tt :TableModeToggle<CR>
    noremap <silent> <space>tc :Tableize<CR>
augroup END


" vim-easy-align
augroup plugin__vim_easy_align
    autocmd!
    vmap <Enter> <Plug>(EasyAlign)
augroup END


" coc
augroup plugin__coc
    autocmd!
    nmap [useful]d <Plug>(coc-definition)
    nmap [useful]t <Plug>(coc-type-definition)
    nmap [useful]i <Plug>(coc-implementation)
    nmap [useful]r <Plug>(coc-references)
    nmap [useful][ <Plug>(coc-diagnostic-prev)
    nmap [useful]] <Plug>(coc-diagnostic-next)
    nmap <silent> [useful]p <Plug>(coc-diagnostic-prev-error)
    nmap <silent> [useful]n <Plug>(coc-diagnostic-next-error)
    nmap <space>lr <Plug>(coc-rename)
    " nnoremap <space>cr :CocRestart
augroup END


" vista
augroup plugin__vista
    autocmd!
    let g:vista#renderer#icons = {
        \   'function': '[f]',
        \   'variable': '[v]',
        \   'property': '[p]',
        \  }

    let g:vista_icon_indent = ['A', 'B']

    " vistaのキーマップを無効化する
    " （個別で無効化できないため）
    let g:vista_no_mappings = 1

    " 上で全マップを無効化したので、<CR>でカーソル下のシンボルへのジャンプだけ再マップする
    autocmd FileType vista,vista_kind nnoremap <buffer> <silent> <CR>
        \ :<C-u>call vista#cursor#FoldOrJump()<CR>

    noremap <silent> [useful]v :<C-u>Vista coc<CR>
    noremap <silent> [useful]V :<C-u>Vista finder coc<CR>

augroup END


" fzf
augroup plugin__fzf
    autocmd!
    command! -bang -nargs=* GGrep
        \ call fzf#vim#grep(
        \   'git grep --line-number -- '.shellescape(<q-args>), 0,
        \   fzf#vim#with_preview({'dir': systemlist('git rev-parse --show-toplevel')[0]}), <bang>0)

    noremap <silent> [useful]f :Files<CR>
    noremap <silent> [useful]g :GFiles<CR>
    noremap <silent> [useful]r :Rg<CR>
    noremap <silent> [useful]R :GGrep<CR>
    " file history
    noremap <silent> [useful]hh :History<CR>
    " command history
    noremap <silent> [useful]hc :History:<CR>
    " search history
    noremap <silent> [useful]hs :History/<CR>
    noremap <silent> [useful]m :Maps<CR>
    noremap <silent> [useful]s :Marks<CR>
    noremap <silent> [useful]c :Commands<CR>

    " source：処理対象（リスト型）（1行でシェルをcall -> 'source': cat ~/dotfiles/vim/vimrc'）
    " sink：sourceに対する処理（関数型）
    nnoremap <;>(fzf-open-vimrc) :call fzf#run({
    \ 'source': <SID>read_my_vimrc(),
    \ 'sink': function('<SID>echo_vimrc_line'),
    \ 'down': '40%',
    \ })<CR>

    function! s:read_my_vimrc() abort
        if has('win64') | return split(system('type %HOMEPATH%\dotfiles\vim\vimrc'), '\n') | endif
        return split(system('cat ~/dotfiles/vim/vimrc'), '\n')
    endfunction

    function! s:echo_vimrc_line(line) abort
        echomsg a:line
    endfunction
augroup END


" vim-fugitive
augroup plugin__vim_fugitive
    autocmd!
    nnoremap <silent> <space>gb :Gblame<CR>
    " 新タブで表示
    nnoremap <silent> <space>gd :tab Gdiff<CR>
    nnoremap <silent> <space>gs :tab Gstatus<CR>

    " Gstatusで独自設定したキーマップでペイン操作等ができるように「s」を無効化（別のキーに変更）
    " autocmd FileType fugitive nnoremap <buffer> s <Nop>
    " keyキーへの割り当てをvalueキーに変更
    let g:nremap = {'s': '' }

    " ペイン分割
    autocmd FileType fugitive nnoremap <buffer> <silent> ss :<C-u>sp<CR>
    autocmd FileType fugitive nnoremap <buffer> <silent> sv :<C-u>vs<CR>

    " ペイン移動
    autocmd FileType fugitive nnoremap <buffer> <silent> sj <C-w>j
    autocmd FileType fugitive nnoremap <buffer> <silent> sk <C-w>k
    autocmd FileType fugitive nnoremap <buffer> <silent> sl <C-w>l
    autocmd FileType fugitive nnoremap <buffer> <silent> sh <C-w>h

    " タブ移動
    autocmd FileType fugitive nnoremap <buffer> <silent> sn gt
    autocmd FileType fugitive nnoremap <buffer> <silent> sp gT

    " タブを閉じる
    autocmd FileType fugitive nnoremap <buffer> <silent> sc :tabclose<CR>
    autocmd FileType fugitive nnoremap <buffer> <silent> sC :tabonly<CR>
augroup END


" vim-operator-replace
augroup plugin__vim_operator_replace
    autocmd!
    map _ <Plug>(operator-replace)
augroup END


" vim-easymotion
augroup plugin__vim_easymotion
    autocmd!
    map <space><space>w <Plug>(easymotion-bd-w)
    nmap <space><space>w <Plug>(easymotion-overwin-w)
    map <space><space>f <Plug>(easymotion-bd-f)
    nmap <space><space>f <Plug>(easymotion-overwin-f)
    map <space><space>l <Plug>(easymotion-bd-jk)
    nmap <space><space>l <Plug>(easymotion-overwin-line)
augroup END


" nerdtree
augroup plugin__nerdtree
    autocmd!
    autocmd BufEnter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif  " 開いているペインがNERDTreeだけの場合はvimを閉じる
    let NERDTreeShowHidden = 1
    let NERDTreeMapOpenVSplit='S'  " s -> S ※ ペイン操作と被るため

    map <silent> [useful]n :NERDTreeToggle<CR>
augroup END


" vim-prettier
augroup plugin__vim_prettier
    autocmd!
    nmap <space>pp <Plug>(PrettierAsync)
augroup END


" nerdtree-git-plugin
augroup plugin__nerdtree_git_plugin
    autocmd!
    let g:NERDTreeIndicatorMapCustom = {
    \ "Modified"  : "M",
    \ "Staged"    : "^",
    \ "Untracked" : "U",
    \ "Renamed"   : "R",
    \ "Unmerged"  : "═",
    \ "Deleted"   : "D",
    \ "Dirty"     : "X",
    \ "Clean"     : "C",
    \ 'Ignored'   : 'I',
    \ "Unknown"   : "?"
    \ }
augroup END


" vimspector
augroup plugin__vimspector
    autocmd!
    nmap <F2>  <Plug>VimspectorContinue
    nmap <F3>  <Plug>VimspectorStop
    nmap <F4>  :<C-u>call vimspector#Reset()<CR>
    nmap <F5>  <Plug>VimspectorToggleBreakpoint
    nmap <F6>  <Plug>VimspectorAddFunctionBreadkpoint
    nmap <F7> <Plug>VimspectorStepOver
    nmap <F8> <Plug>VimspectorStepInto
    nmap <F9> <Plug>VimspectorStepOut
augroup END


" lightline
augroup plugin__lightline
    autocmd!
    execute 'source' g:vimrc_dir . '/rc/plugin/lightline.vim'
augroup END


" indentline
augroup plugin__indentline
    autocmd!
    let g:indentLine_fileTypeExclude = ["help", "markdown", "md", "json"]
augroup END


" vim-gitgutter
augroup plugin__vim_gitgutter
    autocmd!
    set signcolumn=yes
    autocmd FocusGained,WinEnter,BufWinEnter * GitGutterEnable
augroup END


" vim-coloresque
augroup plugin__vim_coloresque
    autocmd!
    autocmd BufNewFile,BufRead *.html call plug#load('vim-coloresque')
    autocmd BufNewFile,BufRead *.css call plug#load('vim-coloresque')
augroup END


" vim-commentary
augroup plugin__vim_commentary
    autocmd!
    autocmd FileType typescript setlocal commentstring=\/\/\ %s
augroup END


" blamer
augroup plugin__blamer
    autocmd!
    let g:blamer_enabled = 1
    let g:blamer_show_in_visual_modes = 0
    let g:blamer_delay = 250
    let g:blamer_prefix = '  # '
    let g:blamer_date_format = '%y/%m/%d %H:%M'
augroup END


" vim-signature
augroup plugin__vim_signature
    autocmd!
    let g:SignatureMap = {
        \ 'Leader'             :  "[core]m",
        \ 'PlaceNextMark'      :  "[core]m,",
        \ 'ToggleMarkAtLine'   :  "[core]m.",
        \ 'PurgeMarksAtLine'   :  "[core]m-",
        \ 'PurgeMarks'         :  "[core]m<Space>",
        \ 'GotoNextLineByPos'  :  "[core]m]",
        \ 'GotoPrevLineByPos'  :  "[core]m[",
        \ 'ListBufferMarks'    :  "[core]m/",
        \ 'ListBufferMarkers'  :  "[core]m?"
        \ }
augroup END


" " vim-closetag
" augroup plugin__vim_closetag
"     autocmd!
"     let g:closetag_filenames = '*.html,*.tsx'
" augroup END


" vim-autopairs
" augroup plugin__vim_autopairs
    " autocmd!
    " let g:AutoPairsMapCh = 0
" augroup END
" }}}



""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" :finish config  {{{
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" gui
augroup gui__config
    autocmd!
    if has('gui_running') | execute 'source' g:vimrc_dir . '/rc/gui.vim' | endif
augroup END
" }}}


" xxx
augroup xxx__xxx
    autocmd!
augroup END



