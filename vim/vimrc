""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" :init config  {{{
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" このファイルの場所を定義（以降、この変数を使用する）
let g:vimrc_dir = expand('<sfile>:p:h')
" }}}



""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" :plug config  {{{
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
call plug#begin('~/.cache/plugged')


" COLOR
Plug 'joshdick/onedark.vim'  " lightlineのテーマで使用
Plug 'morhetz/gruvbox'
Plug 'jacoborus/tender.vim'
Plug 'lifepillar/vim-solarized8'
Plug 'w0ng/vim-hybrid'
Plug 'ryanoasis/vim-devicons'
Plug 'kristijanhusak/defx-git'
Plug 'kristijanhusak/defx-icons'
Plug 'vim-python/python-syntax'
" Plug 'cocopon/iceberg.vim'

" EXTEND-VISUAL
Plug 'itchyny/lightline.vim'
Plug 'Yggdroot/indentline'
Plug 'LeafCage/foldCC.vim'
Plug 'machakann/vim-highlightedyank'
Plug 'gorodinskiy/vim-coloresque', { 'on': [] }  " cursorcolumnが有効だと重い（forロードが動作しないためautocmdでロード）

" EXTEND-ACTION
Plug 'tpope/vim-repeat'
Plug 'kana/vim-submode'
Plug 'itchyny/vim-parenmatch'
Plug 'sharat87/roast.vim'

" TEXTOBJ_OPERATOR
Plug 'kana/vim-textobj-user'
Plug 'kana/vim-textobj-indent'              " kana/vim-textobj-userに依存 (i)
Plug 'kana/vim-textobj-entire'              " kana/vim-textobj-userに依存 (e)
Plug 'thinca/vim-textobj-between'           " kana/vim-textobj-userに依存 (f)
Plug 'Julian/vim-textobj-variable-segment'  " kana/vim-textobj-userに依存 (v)
Plug 'kana/vim-operator-user'
Plug 'kana/vim-operator-replace'            " kana/vim-operator-userに依存 (_)
Plug 'tpope/vim-surround'                   " (s)
Plug 'tpope/vim-commentary'                 " (gc)

" FORMAT
Plug 'prettier/vim-prettier',      { 'do': 'npm install', 'for': ['javascript', 'typescript', 'typescript.tsx', 'css', 'html', 'json'] }
Plug 'junegunn/vim-easy-align',    { 'on': '<Plug>(EasyAlign)' }
Plug 'dhruvasagar/vim-table-mode', { 'on': 'TableModeToggle' }

" GIT
Plug 'tpope/vim-fugitive'
Plug 'airblade/vim-gitgutter'
Plug 'APZelos/blamer.nvim'
Plug 'junegunn/gv.vim', { 'on': 'GV' }

" LSP
Plug 'neoclide/coc.nvim', { 'branch': 'release' }

" DEBUG
Plug 'puremourning/vimspector', { 'on': '<Plug>Vimspector' }

" MISC
Plug 'roxma/nvim-yarp',          has('nvim') ? { 'on': [] } : {}  " nvimのとき:plugに登録するがロードはしない（nvimでないとき:無条件でロードする）
Plug 'roxma/vim-hug-neovim-rpc', has('nvim') ? { 'on': [] } : {}

" MOTION_SEARCH
Plug 'easymotion/vim-easymotion'
Plug 'junegunn/fzf.vim'
Plug 'junegunn/fzf',              { 'do': { -> fzf#install() } }
Plug 'Shougo/defx.nvim',          { 'do': ':UpdateRemotePlugins' }

" TMP
" Plug 'preservim/nerdtree', { 'on': 'NERDTreeToggle' }
" Plug 'Xuyuanp/nerdtree-git-plugin', { 'on': 'NERDTreeToggle' }
" Plug 'kshenoy/vim-signature'
" Plug 'alvan/vim-closetag'
" Plug 'jiangmiao/auto-pairs'
" Plug 'liuchengxu/vista.vim'

" LOCAL
" Plug '~/dev/plugin/indicator.vim'
call plug#end()


" ------------------------------
" post-plug config
syntax on
filetype on
filetype plugin indent on  " filetypeが変更されたときにfiletype用のプラグイン/インデント設定を自動ロードする
set encoding=utf-8  " ※ プラグイン（lightline）の読み込みより後に設定する
" }}}



""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" :basic config  {{{
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" デフォルトプラグインの無効化
execute 'source' g:vimrc_dir . '/rc/disable_default_plugin.vim'


" カラースキーム
set t_Co=256
set termguicolors  " 有効化するときはterminalでもguiのhiになる（+ guiはHEX方式でカラーコードを指定する必要がある）
set background=dark
colorscheme hybrid
" colorscheme solarized8
" colorscheme tender
" colorscheme gruvbox

hi Search gui=NONE guifg=black guibg=#ff8700 cterm=NONE ctermfg=black ctermbg=208
hi SignColumn gui=NONE guifg=NONE guibg=NONE cterm=NONE ctermfg=NONE ctermbg=NONE
hi Folded gui=NONE term=standout ctermbg=darkgray ctermfg=NONE guibg=gray23 guifg=NONE
hi VertSplit gui=NONE guifg=gray30 guibg=NONE cterm=NONE ctermfg=darkgray ctermbg=NONE
hi Normal guibg=NONE ctermbg=NONE


" その他オプション
set shortmess+=I
set number
set showtabline=2
set shellslash
set nrformats=
set wildmenu
set history=5000
set showcmd
set list
set listchars=tab:>-,trail:_
set timeout timeoutlen=1000 ttimeoutlen=0
set updatetime=200
set splitbelow
set splitright
set conceallevel=0  " mdで_等が隠れるのを無効化(indentlineが設定を上書きしてしまうのでindentlineの設定でmdとhelpを除外する)
set whichwrap=<,>,[,]  " 左矢印で上行末、右矢印で下行頭に移動する
" set autochdir
" set cursorcolumn
" set cursorline
" set relativenumber
" set virtualedit=all


" フォールディングの設定
set foldmethod=marker
set foldtext=FoldCCtext()
set commentstring=%s
set fillchars=fold:\ ,diff:-
let g:vim_markdown_folding_disabled=1  " mdを自動で折り畳まないようにする
" set fillchars=vert:\|,fold:\ ,diff:-


" 「~/.cache/vim_tmpfiles」がない場合は作成する
if !isdirectory(expand('~/.cache/vim_tmpfiles')) | call mkdir(expand('~/.cache/vim_tmpfiles'), 'p') | endif


" macとunixだけの設定
if has('mac') || has('unix')
    set mouse=a  " マウス・トラックパッドを有効化
    set backspace=indent,eol,start  " BSの設定(ターミナルではBSが効かないことがある)
endif


" nvimとvimの設定の違いは以下に記述
if has('nvim')
    set mouse=a
    set clipboard=unnamed
else
    set directory=~/.cache/vim_tmpfiles/
    set backupdir=~/.cache/vim_tmpfiles/
    set viminfo+=n~/.cache/vim_tmpfiles/.viminfo
    set undodir=~/.cache/vim_tmpfiles/
    set clipboard=unnamed,autoselect
endif


" 空行の空白を削除する（保存時の直前）
augroup basic__remove_dust
    autocmd!
    autocmd BufWritePre * call takxlz#util#remove_dust()
augroup END


" 外部であった変更を反映する
augroup basic__update_file
    autocmd!
    autocmd FocusGained,WinEnter,InsertEnter * checktime
augroup END


" Todo等のハイライトの設定
" TODO: NOTE: XXX:
augroup basic__todo_highlight
    autocmd!
    autocmd WinEnter,BufRead,BufNew,Syntax * silent! call matchadd('MyTodo', '\(TODO:\|todo:\)')
    autocmd WinEnter,BufRead,BufNew,Syntax * hi MyTodo cterm=bold gui=bold ctermfg=0 ctermbg=220 guifg=black guibg=#ffd700
    autocmd WinEnter,BufRead,BufNew,Syntax * silent! call matchadd('MyNote', '\(NOTE:\|note:\)')
    autocmd WinEnter,BufRead,BufNew,Syntax * hi MyNote cterm=bold gui=bold ctermfg=0 ctermbg=45 guifg=black guibg=#00d7ff
    autocmd WinEnter,BufRead,BufNew,Syntax * silent! call matchadd('MyXxx', '\(XXX:\|xxx:\)')
    autocmd WinEnter,BufRead,BufNew,Syntax * hi MyXxx cterm=bold gui=bold ctermfg=0 ctermbg=9 guifg=black guibg=#ff0000
augroup END


" 普通にcorsorline,corsorcolumnするより重い気がするので無効化
" 一定時間操作がされない場合だけ、カレンド行/列をハイライトする
" augroup basic__auto_cursorline_cursorcolmn
"     autocmd!
"     " 行
"     autocmd CursorMoved,CursorMovedI,WinLeave * setlocal nocursorline
"     autocmd CursorHold,CursorHoldI * setlocal cursorline
"     " 列
"     autocmd CursorMoved,CursorMovedI,WinLeave * setlocal nocursorcolumn
"     autocmd CursorHold,CursorHoldI * setlocal cursorcolumn
" augroup END
" }}}



""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" :filetype config  {{{
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" 下記の違いに気をつける
" autocmd FileType html ~
" autocmd BufRead *.html ~

" general
augroup filetype__general
    autocmd!
    set autoindent
    set smartindent  " 末尾の文字に合わせてインデントを増減する
    set expandtab  " タブキーによるソフトタブを有効化
    set tabstop=4
    set softtabstop=4  " 連続した空白に対してBSなどでカーソルが動く量
    set shiftwidth=4  " オートインデント時のインデント量
augroup END


" vim
augroup filetype__vim
    autocmd!
    autocmd FileType vim setlocal commentstring=\"\ %s
augroup END


" go
augroup filetype__go
    autocmd!
    autocmd BufNewFile,BufRead *.go setlocal tabstop=4 softtabstop=4 shiftwidth=4 expandtab!
augroup END


" python
augroup filetype__python
    autocmd!
    " 使用するpythonの場所を指定
    if has('mac') || has('unix')
        let g:python3_host_prog=exepath('python3')
    else
        " let g:python3_host_prog=expand('~/AppData/Local/Programs/Python/Python35/python')
        let g:python3_host_prog=exepath('python')  " winではpythonとpython3はpythonというコマンドなので3はつけなくていい
        " kaoriya版vimはpython3.5以外だとdllが見つけられずエラーになるので，直接dllの場所を指定する
        if !has('nvim') | set pythonthreedll=~/AppData/Local/Programs/Python/Python38/python38.dll | endif
    endif
augroup END


" ruby
augroup filetype__ruby
    autocmd!
    autocmd BufNewFile,BufRead *.rb setlocal tabstop=2 softtabstop=2 shiftwidth=2
augroup END


" json
augroup filetype__json
    autocmd!
    autocmd BufNewFile,BufRead *.json setlocal tabstop=2 softtabstop=2 shiftwidth=2
augroup END


" html
augroup filetype__html
    autocmd!
    autocmd BufNewFile,BufRead *.html setlocal tabstop=2 softtabstop=2 shiftwidth=2
augroup END


" css
augroup filetype__css
    autocmd!
    autocmd BufNewFile,BufRead *.css setlocal tabstop=2 softtabstop=2 shiftwidth=2
augroup END


" toml
augroup filetype__toml
    autocmd!
    autocmd BufNewFile,BufRead *.toml setlocal filetype=toml
augroup END


" javascript
augroup filetype__js
    autocmd!
    autocmd BufNewFile,BufRead *.js setlocal tabstop=2 softtabstop=2 shiftwidth=2
augroup END


" typescript-tsx
augroup filetype__tsx
    autocmd!
    autocmd BufNewFile,BufRead *.tsx setlocal filetype=typescript.tsx
    autocmd BufNewFile,BufRead *.ts setlocal tabstop=2 softtabstop=2 shiftwidth=2
    autocmd BufNewFile,BufRead *.tsx setlocal tabstop=2 softtabstop=2 shiftwidth=2
augroup END
" }}}



""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" :keymap config  {{{
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" +------------------------------------+
" |        mode      |   no_re  |  re  |
" |------------------------------------|
" | normal  + visual | noremap  | map  |
" | command + insert | noremap! | map! |
" |       normal     | nnoremap | nmap |
" |       visua      | vnoremap | vmap |
" |      command     | cnoremap | cmap |
" |       insert     | inoremap | imap |
" +------------------------------------+

" submode
" [submode#enter_with]でサブモードを作成する
"   1:作成するサブモード名、2:対象モード(n,i,ni)、3:オプション(リマップするときは[r])、4:サブモードに入るキーバインド、5:サブモードに入った際に行う処理
" [submode#map]で作成したサブモード内でのキーバインドの定義する
"   第1～3引数までは、enter_withと同じ、4:afterキーバインド、5:beforeキーバインド

" vim固有の機能を割り当てるプレフィックス
nnoremap [core] <Nop>
nnoremap s <Nop>
nmap s [core]


" 自作関数を割り当てるプレフィックス
nnoremap [util] <Nop>
nmap [core]s [util]


" escape
augroup keymap__escape
    autocmd!
    " escをjjにマッピング
    inoremap jj <ESC>

    " terminal-insertからterminal-normalに抜ける
    tnoremap jj <C-\><C-n>
augroup END


" カーソル移動
augroup keymap__move_cursor
    autocmd!
    " カーソル移動を表示行単位にする
    nnoremap j gj
    nnoremap k gk
    nnoremap gj j
    nnoremap gk k

    " インサートモード時のカーソル移動を追加
    if exists('g:vscode')
        " inoremap <C-j> <Cmd>call VSCodeNotify('cursorDown')<CR>
        " inoremap <C-k> <Cmd>call VSCodeNotify('cursorUp')<CR>
        " inoremap <C-h> <Cmd>call VSCodeNotify('cursorLeft')<CR>
        " inoremap <C-l> <Cmd>call VSCodeNotify('cursorRight')<CR>
    else
        inoremap <C-j> <Down>
        inoremap <C-k> <Up>
        inoremap <C-h> <Left>
        inoremap <C-l> <Right>
    endif

    " カーソル移動を早くする
    nnoremap J 10j
    nnoremap K 10k
augroup END


" ペースト
augroup keymap__paste
    autocmd!
    " ヤンクレジストリからペーストC-pに設定
    nnoremap <C-p> "0p

    " virtualeditの際のpがカーソル末尾からペーストされるようにする
    if has('virtualedit') && &virtualedit =~# '\<all\>'
        nnoremap <expr> p (col('.') >= col('$') ? '$' : '') . 'p'
    endif
augroup END


" レジストリ
augroup keymap__registry
    autocmd!
    " xとsではヤンクしない(_レジスタは消去用レジスタ)
    nnoremap x "_x
    " nnoremap s "_s
augroup END


" 改行
augroup keymap__new_line
    autocmd!
    " 空行で改行しても、インデントのスペースを削除しない
    if !exists('g:vscode')
        nnoremap o oX<C-h>
        nnoremap O OX<C-h>
        inoremap <CR> <CR>X<C-h>
    endif

    " 改行のときの自動コメントを無効化
    autocmd FileType * setlocal formatoptions-=ro

    if !exists('g:vscode')
        " インデントを維持したまま、カーソル下に行を挿入し、その行に移動
        nnoremap <C-j> oX<C-h><ESC>

        " インデントを維持しないで、カーソル下に行を挿入し、その行に移動
        nnoremap <silent> <C-k> :<C-u>call append(expand('.'), '')<CR>j

        " カーソル位置に改行を挿入(カーソル右は折り返される)
        " nnoremap <CR> i<CR><ESC>
    endif
augroup END


" 行移動
augroup keymap__move_line
    autocmd!
    " 行を移動
    nnoremap <C-Up> "zdd<Up>"zP
    nnoremap <C-Down> "zdd"zp

    " 複数行を移動
    vnoremap <C-Up> "zx<Up>"zP`[V`]
    vnoremap <C-Down> "zx"zp`[V`]
augroup END


" トグル
augroup keymap__toggle
    autocmd!
    nnoremap <silent> <;>(toggle_relative_num) :<C-u>setlocal relativenumber!<CR>
    nnoremap <silent> <;>(toggle_cursor_line) :<C-u>setlocal cursorline!<CR>
    nnoremap <silent> <;>(toggle_cursor_column) :<C-u>setlocal cursorcolumn!<CR>
augroup END


" ハイライト
augroup keymap__highlight
    autocmd!
    " もともとタブ移動のキーマップだが、sキーに割り当てているので不要
    nnoremap gt <Nop>
    nnoremap gT <Nop>

    " カーソル下の単語をハイライト
    " nnoremap <silent> [util]w "zyiw:let @/ = '\<' . @z . '\>'<CR>:set hlsearch<CR>
    nnoremap <silent> [util]s :call takxlz#util#hi_words()<CR>:set hlsearch<CR>
    nnoremap <silent> [util]S :let g:hlstate = ''<CR>:let @/ = ''<CR>

    " カレント行/列を3秒間だけハイライト
    nnoremap <silent> [util]f :call takxlz#util#hi_cursorrc_3sec()<CR>
augroup END


" ペイン
augroup keymap__pane
    autocmd!

    if exists('g:vscode')
        nnoremap <silent> [core]V <Cmd>call VSCodeNotify('workbench.action.splitEditorDown')<CR>
        nnoremap <silent> [core]v <Cmd>call VSCodeNotify('workbench.action.splitEditorRight')<CR>
        nnoremap [core]j <Cmd>call VSCodeNotify('workbench.action.focusBelowGroup')<CR>
        nnoremap [core]k <Cmd>call VSCodeNotify('workbench.action.focusAboveGroup')<CR>
        nnoremap [core]l <Cmd>call VSCodeNotify('workbench.action.focusRightGroup')<CR>
        nnoremap [core]h <Cmd>call VSCodeNotify('workbench.action.focusLeftGroup')<CR>
        nnoremap [core]> <Cmd>call VSCodeNotify('workbench.action.increaseViewWidth')<CR>
        nnoremap [core]< <Cmd>call VSCodeNotify('workbench.action.decreaseViewWidth')<CR>
        nnoremap [core]+ <Cmd>call VSCodeNotify('workbench.action.increaseViewHeight')<CR>
        nnoremap [core]- <Cmd>call VSCodeNotify('workbench.action.decreaseViewHeight')<CR>
    else
        " ペイン分割
        nnoremap <silent> [core]V :<C-u>sp<CR>
        nnoremap <silent> [core]v :<C-u>vs<CR>

        " ペイン移動
        nnoremap [core]j <C-w>j
        nnoremap [core]k <C-w>k
        nnoremap [core]l <C-w>l
        nnoremap [core]h <C-w>h

        " ペイン自体を移動
        nnoremap [core]J <C-w>J
        nnoremap [core]K <C-w>K
        nnoremap [core]L <C-w>L
        nnoremap [core]H <C-w>H

        " 大きさを揃える
        nnoremap [core]= <C-w>=

        " ペインの最大化トグル
        let g:takxlz_is_maximize = 0
        nnoremap <silent> [core]z :call takxlz#util#toggle_maximize_window()<CR>

        " ペインを閉じる、バッファを閉じる
        nnoremap <silent> [core]q :<C-u>q<CR>
        nnoremap <silent> [core]Q :<C-u>bd<CR>

        " s>...でw幅を増やす、s<...でw幅を減らす
        " s+...でw高さを増やす、s-...でw高さを減らす
        call submode#enter_with('bufmove', 'n', '', '[core]>', '<C-w>>')
        call submode#enter_with('bufmove', 'n', '', '[core]<', '<C-w><')
        call submode#enter_with('bufmove', 'n', '', '[core]+', '<C-w>+')
        call submode#enter_with('bufmove', 'n', '', '[core]-', '<C-w>-')
        call submode#map('bufmove', 'n', '', '>', '<C-w>>')
        call submode#map('bufmove', 'n', '', '<', '<C-w><')
        call submode#map('bufmove', 'n', '', '+', '<C-w>+')
        call submode#map('bufmove', 'n', '', '-', '<C-w>-')
    endif
augroup END


" タブ
augroup keymap__tab
    " 新規タブ
    nnoremap <silent> [core]t :<C-u>tabnew<CR>

    " 次のタブ、前のタブに移動
    " nnoremap [core]n gt
    " nnoremap [core]N gT
    nnoremap <TAB> gt
    nnoremap <S-TAB> gT

    " タブの位置を変更する
    nnoremap <silent> <S-RIGHT> :tabm +1<CR>
    nnoremap <silent> <S-LEFT> :tabm -1<CR>

    " 現在のタブを閉じる
    nnoremap <silent> [core]c :tabclose<CR>

    " 現在のタブ以外を閉じる
    nnoremap <silent> [core]C :tabonly<CR>

    " ラベル文字列を変更する
    nnoremap <silent> [core], :call takxlz#util#change_tab_label()<CR>
augroup END


" フォールディング
augroup keymap__fold
    autocmd!
    " プレフィックスキーを設定
    noremap [fold] <Nop>
    map <space>a [fold]

    " カーソル下の折りたたみを1段階トグル
    nnoremap [core]a za

    " カーソル下の折りたたみを全てトグル
    nnoremap [core]A zA

    " 全ての折りたたみを開く
    nnoremap [core]o zR

    " 全ての折りたたみを閉じる
    nnoremap [core]O zM

    " 選択範囲にマーカーを埋め込む(vモードで[fold]が反応しなかったので直接<space>を書く)
    "noremap <silent> <space>fm zf
    noremap [core]f zf

    " カーソル下の折りたたみマーカーを削除
    nnoremap [core]d zd
augroup END


" vscode-nvim
augroup keymap__vscode_nvim
    autocmd!
    if exists('g:vscode')
        " nnoremap <C-j> <Cmd>call VSCodeNotify('selectNextSuggestion')<CR>
        " nnoremap <C-k> <Cmd>call VSCodeNotify('selectPrevSuggestion')<CR>
    endif
augroup END
" }}}



""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" :plugin config  {{{
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" 「let g:plugin__XXX = 0」等して左記の変数を存在させればプラグインの設定を読み込まない
" ※ 以下で行っている独自設定を無効にするだけでプラグイン自体を無効にするわけではない

" COLOR {{{
augroup plugin__color
    autocmd!

    " python-syntax
    if !exists('g:plugin__python_syntax')
        let g:python_highlight_all = 1
    endif
augroup END
" }}}


" EXTEND-VISUAL {{{
augroup plugin__extend_visual
    autocmd!

    " lightline
    if !exists('g:plugin__lightline')
        execute 'source' g:vimrc_dir . '/rc/plugin/lightline.vim'
    endif

    " indentline
    if !exists('g:plugin__indentline')
        let g:indentLine_fileTypeExclude = ["help", "markdown", "md", "json"]
    endif

    " vim-highlightedyank
    if !exists('g:plugin__vim_highlightedyank')
        let g:highlightedyank_highlight_duration = 400
    endif

    " vim-coloresque
    if !exists('g:plugin__vim_colorsque')
        " autocmd BufNewFile,BufRead *.html call plug#load('vim-coloresque')
        " autocmd BufNewFile,BufRead *.css call plug#load('vim-coloresque')
    endif
augroup END
" }}}


" TEXTOBJ_OPERATOR {{{
augroup plugin__textobj_operator
    autocmd!

    " vim-operator-replace
    if !exists('g:plugin__vim_operator_replace')
        map _ <Plug>(operator-replace)
    endif

    " vim-commentary
    if !exists('g:plugin__vim_commentary')
        autocmd FileType typescript setlocal commentstring=\/\/\ %s
        if exists('g:vscode')
            xmap gc  <Plug>VSCodeCommentary
            nmap gc  <Plug>VSCodeCommentary
            omap gc  <Plug>VSCodeCommentary
            nmap gcc <Plug>VSCodeCommentaryLine
        endif
    endif
augroup END
" }}}


" FORMAT {{{
augroup plugin__format
    autocmd!
    nnoremap [format] <Nop>
    nmap <space>f [format]

    " vim-prettier
    if !exists('g:plugin__vim_prettier')
        nmap [format]p <Plug>(PrettierAsync)
    endif

    " vim-easy-align
    if !exists('g:plugin__vim_easy-align')
        vmap <Enter> <Plug>(EasyAlign)
    endif

    " vim-table-mode
    if !exists('g:plugin__vim_table_mode')
        let g:table_mode_corner = '|'
        noremap <silent> [format]t :TableModeToggle<CR>
        noremap <silent> [format]T :Tableize<CR>
    endif
augroup END
" }}}


" GIT {{{
augroup plugin__git
    autocmd!
    nnoremap [git] <Nop>
    nmap <space>g [git]

    " vim-fugitive
    if !exists('g:plugin__vim_fugitive')
        nnoremap <silent> [git]b :Gblame<CR>
        nnoremap <silent> [git]s :tab Gstatus<CR>
        nnoremap <silent> [git]d :tab Gdiff<CR>
        nnoremap <silent> [git]D :tab Gvdiff<CR>
        " nnoremap <silent> [git]l :tab Glog<CR>
        nmap [git]h :diffget //2<CR>
        nmap [git]u :diffget //3<CR>

        " Gstatusで独自設定したキーマップでペイン操作等ができるように「s」を無効化（別のキーに変更）
        " autocmd FileType fugitive,git nnoremap <buffer> s <Nop>
        " keyキーへの割り当てをvalueキーに変更
        let g:nremap = {'s': '' }

        " ペイン分割
        autocmd FileType fugitive,git nnoremap <buffer> <silent> sV :<C-u>sp<CR>
        autocmd FileType fugitive nnoremap <buffer> <silent> sv :<C-u>vs<CR>
        " ペイン移動
        autocmd FileType fugitive,git nnoremap <buffer> <silent> sj <C-w>j
        autocmd FileType fugitive,git nnoremap <buffer> <silent> sk <C-w>k
        autocmd FileType fugitive,git nnoremap <buffer> <silent> sl <C-w>l
        autocmd FileType fugitive,git nnoremap <buffer> <silent> sh <C-w>h
        " タブ移動
        autocmd FileType fugitive,git nnoremap <buffer> <silent> sn gt
        autocmd FileType fugitive,git nnoremap <buffer> <silent> sp gT
        " タブを閉じる
        autocmd FileType fugitive,git nnoremap <buffer> <silent> sc :tabclose<CR>
        autocmd FileType fugitive,git nnoremap <buffer> <silent> sC :tabonly<CR>
    endif

    " gv
    if !exists('g:plugin__gv')
        nnoremap <silent> [git]l :GV<CR>
        nnoremap <silent> [git]L :GV!<CR>
    endif

    " vim-gitgutter
    if !exists('g:plugin__vim_gitgutter')
        set signcolumn=yes
        autocmd FocusGained,WinEnter,BufWinEnter * GitGutterEnable
    endif

    " blamer
    if !exists('g:plugin__blamer')
        let g:blamer_enabled = 1
        let g:blamer_show_in_visual_modes = 0
        let g:blamer_delay = 250
        let g:blamer_date_format = '%y/%m/%d %H:%M'
        " let g:blamer_prefix = '  # '
    endif
augroup END
" }}}


" LSP {{{
augroup plugin__lsp
    autocmd!
    nnoremap [lsp] <Nop>
    nmap <space>l [lsp]

    " coc
    if !exists('g:plugin__coc')
        nmap [lsp]l <Plug>(coc-definition)
        nmap [lsp]t <Plug>(coc-type-definition)
        nmap [lsp]i <Plug>(coc-implementation)
        nmap [lsp]r <Plug>(coc-references)
        nmap [lsp][ <Plug>(coc-diagnostic-prev)
        nmap [lsp]] <Plug>(coc-diagnostic-next)
        nmap [lsp]R <Plug>(coc-rename)
        nmap <silent> [lsp]p <Plug>(coc-diagnostic-prev-error)
        nmap <silent> [lsp]n <Plug>(coc-diagnostic-next-error)
        nnoremap [lsp]d :<C-u>CocList diagnostics<CR>
        nnoremap gh :<C-u>call CocActionAsync('doHover')<CR>
        " nnoremap <space>cr :CocRestart
    endif
augroup END
" }}}


" DEBUG {{{
augroup plugin__debug
    autocmd!

    " vimspector
    if !exists('g:plugin__vimspector')
        " let g:vimspector_enable_mapping = 'HUMAN'
        nmap <F5>    <Plug>VimspectorContinue
        nmap <S-F5>  <Plug>VimspectorStop
        nmap <F4>    <Plug>VimspectorRestart
        nmap <S-F4>  :<C-u>call vimspector#Reset()<CR>
        nmap <F9>    <Plug>VimspectorToggleBreakpoint
        nmap <S-F9>  <Plug>VimspectorAddFunctionBreadkpoint
        nmap <F10>   <Plug>VimspectorStepOver
        nmap <F11>   <Plug>VimspectorStepInto
        nmap <S-F11> <Plug>VimspectorStepOut
    endif
augroup END
" }}}


" MOTION_SEARCH {{{
augroup plugin__motion
    nnoremap [motion] <Nop>
    nmap <space><space> [motion]
    autocmd!

    " vim-easymotion
    if !exists('g:plugin__vim_easymotion')
        map  [motion]1 <Plug>(easymotion-bd-w)
        nmap [motion]1 <Plug>(easymotion-overwin-w)
        map  [motion]2 <Plug>(easymotion-bd-jk)
        nmap [motion]2 <Plug>(easymotion-overwin-line)
        map  [motion]3 <Plug>(easymotion-bd-f)
        nmap [motion]3 <Plug>(easymotion-overwin-f)
    endif

    " vista
    " if !exists('g:plugin__vista')
    "     let g:vista#renderer#icons = { 'function': '[f]', 'variable': '[v]', 'property': '[p]' }
    "     " vistaのキーマップを無効化する（個別で無効化できないため）
    "     let g:vista_no_mappings = 1
    "     " 上で全マップを無効化したので、<CR>でカーソル下のシンボルへのジャンプだけ再マップする
    "     autocmd FileType vista,vista_kind nnoremap <buffer> <silent> <CR> :<C-u>call vista#cursor#FoldOrJump()<CR>
    "     noremap <silent> [motion]v :<C-u>Vista coc<CR>
    "     noremap <silent> [motion]V :<C-u>Vista finder coc<CR>
    " endif

    " fzf
    if !exists('g:plugin__fzf')
        let g:fzf_layout = { 'down': '~40%' }

        command! -bang -nargs=* GGrep
            \ call fzf#vim#grep('git grep --line-number -- '.shellescape(<q-args>),
            \ 0,
            \ fzf#vim#with_preview({'dir': systemlist('git rev-parse --show-toplevel')[0]}),
            \ <bang>0)

        noremap <silent> [motion]g :GFiles<CR>
        noremap <silent> [motion]f :Files<CR>
        noremap <silent> [motion]r :Rg<CR>
        noremap <silent> [motion]R :GGrep<CR>
        noremap <silent> [motion]h :History<CR>
        noremap <silent> [motion]H :History:<CR>
        noremap <silent> [motion]m :Maps<CR>
        noremap <silent> [motion]M :Marks<CR>
        noremap <silent> [motion]c :Commands<CR>
        " noremap <silent> [motion]hs :History/<CR>
        execute 'source' g:vimrc_dir . '/rc/plugin/fzf.vim'
    endif

    " defx
    if !exists('g:plugin__defx')
        " autocmd FileType defx setlocal tabstop=2 softtabstop=2 shiftwidth=2
        " =~ 正規表現に一致する
        autocmd BufEnter * if (winnr("$") == 1 && &ft =~ 'defx') | q | endif  " 開いているペインがDefxだけの場合はvimを閉じる

        nnoremap <silent> [motion]d :<C-u>Defx
            \ -listed -resume
            \ -split=vertical
            \ -winwidth=30
            \ -direction=topleft
            \ -columns=:mark:git:indent:icon:icons:filename
            \ -buffer-name=tab`tabpagenr()``expand('%:p:h')`
            \ -search=`expand('%:p')`<CR>

        nnoremap <silent> [motion]N :<C-u>Defx
            \ -listed
            \ -resume
            \ -columns=mark:indent:icon:icons:filename:git:type:time:size
            \ -buffer-name=tab`tabpagenr()``expand('%:p:h')`
            \ -search=`expand('%:p')`<CR>

        execute 'source' g:vimrc_dir . '/rc/plugin/defx.vim'
    endif
augroup END
" }}}
" }}}



""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" :finish config  {{{
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" gui
augroup gui__config
    autocmd!
    if has('gui_running') | execute 'source' g:vimrc_dir . '/rc/gui.vim' | endif
augroup END
" }}}


" xxx
augroup xxx__xxx
    autocmd!
augroup END



