" init config
" plug config
" basic config
" filetype config
" keymap config
" plugin config
" finish config

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" :init config  {{{
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" このファイルの場所を定義
let g:vimrc_dir = expand('<sfile>:p:h')
" }}}


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" :plug config  {{{
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
call plug#begin('~/.cache/plugged')
    Plug 'dhruvasagar/vim-table-mode', { 'on': 'TableModeToggle' }
    Plug 'gorodinskiy/vim-coloresque', { 'on': [] }  " cursorcolumnが有効だと重い（forロードが動作しないためautocmdでロード）
    Plug 'junegunn/vim-easy-align', { 'on': '<Plug>(EasyAlign)' }
    Plug 'neoclide/coc.nvim', {'branch': 'release'}
    Plug 'preservim/nerdtree', { 'on': 'NERDTreeToggle' }
    Plug 'Xuyuanp/nerdtree-git-plugin', { 'on': 'NERDTreeToggle' }
    Plug 'puremourning/vimspector', { 'on': '<Plug>Vimspector' }
    Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
    Plug 'junegunn/fzf.vim'
    Plug 'easymotion/vim-easymotion'
    Plug 'vim-python/python-syntax'
    Plug 'LeafCage/foldCC.vim'
    Plug 'joshdick/onedark.vim'
    Plug 'Yggdroot/indentline'
    Plug 'airblade/vim-gitgutter'
    Plug 'itchyny/lightline.vim'
    Plug 'itchyny/vim-parenmatch'
    Plug 'kana/vim-submode'
    Plug 'kana/vim-textobj-user'
    Plug 'kana/vim-operator-user'
    Plug 'kana/vim-operator-replace'  " kana/vim-operator-userに依存 (_)
    Plug 'kana/vim-textobj-indent'  " kana/vim-textobj-userに依存 (i)
    Plug 'kana/vim-textobj-entire'  " kana/vim-textobj-userに依存 (e)
    Plug 'thinca/vim-textobj-between'  " kana/vim-textobj-userに依存 (f)
    Plug 'Julian/vim-textobj-variable-segment'  " kana/vim-textobj-userに依存 (v)
    Plug 'tpope/vim-surround'  " (s)
    Plug 'tpope/vim-fugitive'
    Plug 'tpope/vim-repeat'
    Plug 'tpope/vim-commentary'  " (gc)
call plug#end()

" ------------------------------
" post-plug config
syntax on
filetype on
filetype plugin indent on  " filetypeが変更されたときにfiletype用のプラグイン/インデント設定を自動ロードする
set encoding=utf-8  " ※プラグイン（lightline）の読み込みより後に設定する
" }}}


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" :basic config  {{{
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" デフォルトプラグインの無効化
execute 'source' g:vimrc_dir . '/rc/disable_default_plugin.vim'

"  カラースキーム
set t_Co=256
let g:onedark_termcolors=256
colorscheme onedark
hi Normal ctermbg=NONE  " カラースキームを適用していてもターミナルの背景色に合わせる

" その他オプション
set shortmess+=I  " オープニングメッセージを非表示
set number  " 行番号を表示
set cursorline  " カレント行をハイライト
set cursorcolumn  " カレント列をハイライト
set shellslash  " windowsでのディレクトリ区切り文字を「/」にする
set autochdir  " 自動で開いたファイルの場所に移動
set nrformats=  " 数値の形式を10進数にする（デフォルトは8進数）
set whichwrap=<,>,[,]  " 左矢印で上行末、右矢印で下行頭に移動する
set conceallevel=0  " mdで_等が隠れるのを無効化(indentlineが設定を上書きしてしまうのでindentlineの設定でmdとhelpを除外する)
set wildmenu  " コマンドの補完
set history=5000  " コマンドのヒストリの変更
set showcmd  " 入力中のコマンドを右下に表示
set list  " 不可視文字を表示
set listchars=tab:>-,trail:_  " タブを>-で表示
set timeout timeoutlen=1000 ttimeoutlen=0  " キーバインドの待機時間の設定
set updatetime=200  " vimでのプラグインなどの反映時間
set fillchars=vert:\|,fold:\ ,diff:-  " 縦分割「|」、フォールディンを「 」、diffを「-」に変更
hi VertSplit gui=NONE guifg=gray30 guibg=NONE cterm=NONE ctermfg=darkgray ctermbg=NONE  " ペイン分割したときのペイン境界線の色を指定

" フォールディングの設定
set foldmethod=marker
set foldtext=FoldCCtext()  " フォールディング文字列をLeafCage/foldCC.vimの文字列にする
set commentstring=%s
let g:vim_markdown_folding_disabled=1  " mdを自動で折り畳まないようにする
set fillchars=vert:\|,fold:\ ,diff:-  " 縦分割「|」、フォールディングを「 」、diffを「-」に変更
hi Folded gui=NONE term=standout ctermbg=darkgray ctermfg=NONE guibg=gray23 guifg=NONE  " フォールディング行の色

" 「~/.cache/vim_tmpfiles」がない場合は作成する
if !isdirectory(expand('~/.cache/vim_tmpfiles')) | call mkdir(expand('~/.cache/vim_tmpfiles'), 'p') | endif

" macとunixだけの設定
if has('mac') || has('unix')
    set mouse=a  " マウス・トラックパッドを有効化
    set backspace=indent,eol,start  " BSの設定(ターミナルではBSが効かないことがある)
endif

" nvimとvimの設定の違いは以下に記述
if has('nvim')
    set mouse=a
    set clipboard=unnamed
else
    set directory=~/.cache/vim_tmpfiles/
    set backupdir=~/.cache/vim_tmpfiles/
    set viminfo+=n~/.cache/vim_tmpfiles/.viminfo
    set undodir=~/.cache/vim_tmpfiles/
    set clipboard=unnamed,autoselect
endif

" 空行の空白を削除する（保存時の直前）
augroup basic_remove_dust
    autocmd!
    autocmd BufWritePre * call takxlz#util#remove_dust()
augroup END

" 外部であった変更を反映する
augroup basic_update_file
    autocmd!
    autocmd FocusGained,WinEnter,InsertEnter * checktime
augroup END
" }}}


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" :filetype config  {{{
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" 下記の違いに気をつける
" autocmd FileType html ~
" autocmd BufRead *.html ~

" general
augroup filetype_general
    autocmd!
    set autoindent
    set smartindent  " 末尾の文字に合わせてインデントを増減する
    set expandtab  " タブキーによるソフトタブを有効化
    set tabstop=4
    set softtabstop=4  " 連続した空白に対してBSなどでカーソルが動く量
    set shiftwidth=4  " オートインデント時のインデント量
augroup END

" vim
augroup filetype_vim
    autocmd!
    autocmd FileType vim setlocal commentstring=\"\ %s
augroup END

" python
augroup filetype_python
    autocmd!
    " 使用するpythonの場所を指定
    if has('mac') || has('unix')
        let g:python3_host_prog=exepath('python3')
    else
        " let g:python3_host_prog=expand('~/AppData/Local/Programs/Python/Python35/python')
        let g:python3_host_prog=exepath('python')  " winではpythonとpython3はpythonというコマンドなので3はつけなくていい
        " kaoriya版vimはpython3.5以外だとdllが見つけられずエラーになるので，直接dllの場所を指定する
        if !has('nvim') | set pythonthreedll=~/AppData/Local/Programs/Python/Python38/python38.dll | endif
    endif
augroup END

" ruby
augroup filetype_ruby
    autocmd!
    autocmd BufNewFile,BufRead *.rb setlocal tabstop=2 softtabstop=2 shiftwidth=2
augroup END

" json
augroup filetype_json
    autocmd!
    autocmd BufNewFile,BufRead *.json setlocal tabstop=2 softtabstop=2 shiftwidth=2
augroup END

" toml
augroup filetype_toml
    autocmd!
    autocmd BufNewFile,BufRead *.toml setfiletype toml
augroup END
" }}}


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" :keymap config  {{{
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" +------------------------------------+
" |        mode      |   no_re  |  re  |
" |------------------------------------|
" | normal  + visual | noremap  | map  |
" | command + insert | noremap! | map! |
" |       normal     | nnoremap | nmap |
" |       visua      | vnoremap | vmap |
" |      command     | cnoremap | cmap |
" |       insert     | inoremap | imap |
" +------------------------------------+

" submode
" [submode#enter_with]でサブモードを作成する
"   1:作成するサブモード名、2:対象モード(n,i,ni)、3:オプション(リマップするときは[r])、4:サブモードに入るキーバインド、5:サブモードに入った際に行う処理
" [submode#map]で作成したサブモード内でのキーバインドの定義する
"   第1～3引数までは、enter_withと同じ、4:afterキーバインド、5:beforeキーバインド

" escape
augroup keymap_escape
    autocmd!
    " escをjjにマッピング
    inoremap jj <ESC>

    " terminal-insertからterminal-normalに抜ける
    tnoremap jj <C-\><C-n>
augroup END

" カーソル移動
augroup keymap_move_cursor
    autocmd!
    " カーソル移動を表示行単位にする
    nnoremap j gj
    nnoremap k gk
    nnoremap <Down> g
    nnoremap <Up> gk

    " インサートモード時のカーソル移動を追加
    inoremap <C-j> <Down>
    inoremap <C-k> <Up>
    inoremap <C-h> <Left>
    inoremap <C-l> <Right>

    " カーソル移動を早くする
    nnoremap J 10j
    nnoremap K 10k
augroup END

" ペースト
augroup keymap_paste
    autocmd!
    " ヤンクレジストリからペーストC-pに設定
    nnoremap <C-p> "0p
augroup END

" レジストリ
augroup keymap_registry
    autocmd!
    " xとsではヤンクしない(_レジスタは消去用レジスタ)
    nnoremap x "_x
    nnoremap s "_s
augroup END

" 改行
augroup keymap_new_line
    autocmd!
    " 空行で改行しても、インデントのスペースを削除しない
    nnoremap o oX<C-h>
    nnoremap O OX<C-h>
    inoremap <CR> <CR>X<C-h>

    " 改行のときの自動コメントを無効化
    autocmd FileType * setlocal formatoptions-=ro

    " インデントを維持したまま、カーソル下に行を挿入し、その行に移動
    nnoremap <C-j> oX<C-h><ESC>

    " インデントを維持しないで、カーソル下に行を挿入し、その行に移動
    nnoremap <silent> <C-k> :<C-u>call append(expand('.'), '')<CR>j

    " カーソル位置に改行を挿入(カーソル右は折り返される)
    nnoremap <CR> i<CR><ESC>
augroup END

" 行移動
augroup keymap_move_line
    autocmd!
    " 行を移動
    nnoremap <C-Up> "zdd<Up>"zP
    nnoremap <C-Down> "zdd"zp

    " 複数行を移動
    vnoremap <C-Up> "zx<Up>"zP`[V`]
    vnoremap <C-Down> "zx"zp`[V`]
augroup END

" トグル
augroup keymap_toggle
    autocmd!
    nnoremap <silent> <;>(toggle_relative_num) :<C-u>setlocal relativenumber!<CR>
    nnoremap <silent> <;>(toggle_cursor_column) :<C-u>setlocal cursorcolumn!<CR>
augroup END

" ハイライト
augroup keymap_highlight
    autocmd!
    " カーソル下の単語をハイライト
    nnoremap <silent> <space><space> "zyiw:let @/ = '\<' . @z . '\>'<CR>:set hlsearch<CR>
augroup END

" ペイン
augroup keymap_pane
    autocmd!
    " プレフィックスキーを設定
    nnoremap [pane] <Nop>
    nnoremap s <Nop>
    nmap s [pane]

    " ペイン分割
    nnoremap <silent> [pane]s :<C-u>sp<CR>
    nnoremap <silent> [pane]v :<C-u>vs<CR>

    " ペイン移動
    nnoremap [pane]j <C-w>j
    nnoremap [pane]k <C-w>k
    nnoremap [pane]l <C-w>l
    nnoremap [pane]h <C-w>h

    " ペイン自体を移動
    nnoremap [pane]J <C-w>J
    nnoremap [pane]K <C-w>K
    nnoremap [pane]L <C-w>L
    nnoremap [pane]H <C-w>H

    " 次のタブ、前のタブに移動
    nnoremap [pane]n gt
    nnoremap [pane]p gT
    " nnoremap <Tab> gt
    " nnoremap <S-Tab> gT

    " 大きさを揃える、縦横最大化
    nnoremap [pane]= <C-w>=
    nnoremap [pane]o <C-w>_<C-w>|

    " 新規タブ
    nnoremap <silent> [pane]t :<C-u>tabnew<CR>

    " ペインを閉じる、バッファを閉じる
    nnoremap <silent> [pane]q :<C-u>q<CR>
    nnoremap <silent> [pane]Q :<C-u>bd<CR>

    " s>...でw幅を増やす、s<...でw幅を減らす
    " s+...でw高さを増やす、s-...でw高さを減らす
    call submode#enter_with('bufmove', 'n', '', '[pane]>', '<C-w>>')
    call submode#enter_with('bufmove', 'n', '', '[pane]<', '<C-w><')
    call submode#enter_with('bufmove', 'n', '', '[pane]+', '<C-w>+')
    call submode#enter_with('bufmove', 'n', '', '[pane]-', '<C-w>-')
    call submode#map('bufmove', 'n', '', '>', '<C-w>>')
    call submode#map('bufmove', 'n', '', '<', '<C-w><')
    call submode#map('bufmove', 'n', '', '+', '<C-w>+')
    call submode#map('bufmove', 'n', '', '-', '<C-w>-')

    " ペインの最大化トグル
    let g:takxlz_is_maximize = 0
    nnoremap <silent> [pane]z :call takxlz#util#toggle_maximize_window()<CR>
augroup END

" フォールディング
augroup keymap_fold
    autocmd!
    " プレフィックスキーを設定
    noremap [fold] <Nop>
    map <space>a [fold]

    " カーソル下の折りたたみを1段階トグル
    nnoremap [fold]a za

    " カーソル下の折りたたみを全てトグル
    nnoremap [fold]A zA

    " 全ての折りたたみを閉じる
    nnoremap [fold]c zM

    " 全ての折りたたみを開く
    nnoremap [fold]o zR

    " 選択範囲にマーカーを埋め込む(vモードで[fold]が反応しなかったので直接<space>を書く)
    "noremap <silent> <space>fm zf
    noremap [fold]m zf

    " カーソル下の折りたたみマーカーを削除
    nnoremap [fold]d zd
augroup END
" }}}


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" :plugin config  {{{
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" プラグインのキーマップは基本的に<space>をプレフィックスとする
" プラグインによっては利便性等を考慮して<space>を設定しないものもある（vim-commentary[gc]など）
" <space>g => goto
nnoremap [goto] <Nop>
nmap <space>g [goto]

" <space>v => vcs(git)
nnoremap [vcs] <Nop>
nmap <space>v [vcs]

" <space>f => find(filer, fzf)
nnoremap [find] <Nop>
nmap <space>f [find]


" vim-table-mode
augroup plugin_vim-table-mode
    autocmd!
    let g:table_mode_corner = '|'

    noremap <silent> <space>tt :TableModeToggle<CR>
    noremap <silent> <space>tc :Tableize<CR>
augroup END

" vim-easy-align
augroup plugin_vim-easy-align
    autocmd!
    vmap <Enter> <Plug>(EasyAlign)
augroup END

" coc
augroup plugin_coc
    autocmd!
    nmap [goto]d <Plug>(coc-definition)
    nmap [goto]y <Plug>(coc-type-definition)
    nmap [goto]i <Plug>(coc-implementation)
    nmap [goto]r <Plug>(coc-references)
    nmap [goto][ <Plug>(coc-diagnostic-prev)
    nmap [goto]] <Plug>(coc-diagnostic-next)
    nmap <silent> [goto]p <Plug>(coc-diagnostic-prev-error)
    nmap <silent> [goto]n <Plug>(coc-diagnostic-next-error)
    nmap <space>cr <Plug>(coc-rename)
    " nnoremap <space>cr :CocRestart
augroup END

" fzf
augroup plugin_fzf
    autocmd!
    noremap <silent> [find]m :Maps<CR>
    noremap <silent> [find]g :GFiles<CR>

    " source：処理対象（リスト型）（1行でシェルをcall -> 'source': cat ~/dotfiles/vim/vimrc'）
    " sink：sourceに対する処理（関数型）
    nnoremap <;>(fzf-open-vimrc) :call fzf#run({
    \ 'source': <SID>read_my_vimrc(),
    \ 'sink': function('<SID>echo_vimrc_line'),
    \ 'down': '40%',
    \ })<CR>

    function! s:read_my_vimrc() abort
        if has('win64') | return split(system('type %HOMEPATH%\dotfiles\vim\vimrc'), '\n') | endif
        return split(system('cat ~/dotfiles/vim/vimrc'), '\n')
    endfunction

    function! s:echo_vimrc_line(line) abort
        echomsg a:line
    endfunction
augroup END

" vim-fugitive
augroup plugin_vim-fugitive
    autocmd!
    nnoremap <silent> [vcs]b :Gblame<CR>
    nnoremap <silent> [vcs]d :Gdiff<CR>
    nnoremap <silent> [vcs]s :Gstatus<CR>
augroup END

" vim-operator-replace
augroup plugin_vim-operator-replace
    autocmd!
    map _ <Plug>(operator-replace)
augroup END

" vim-easymotion
augroup plugin_vim-easymotion
    autocmd!
    map [goto]w <Plug>(easymotion-bd-w)
    nmap [goto]w <Plug>(easymotion-overwin-w)
    map [goto]f <Plug>(easymotion-bd-f)
    nmap [goto]f <Plug>(easymotion-overwin-f)
    map [goto]l <Plug>(easymotion-bd-jk)
    nmap [goto]l <Plug>(easymotion-overwin-line)
augroup END

" nerdtree
augroup plugin_nerdtree
    autocmd!
    autocmd BufEnter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif  " 開いているペインがNERDTreeだけの場合はvimを閉じる
    let NERDTreeShowHidden = 1

    map <silent> [find]f :NERDTreeToggle<CR>
    let NERDTreeMapOpenVSplit='S'  " s -> S ※ ペイン操作と被るため
augroup END

" nerdtree-git-plugin
augroup plugin_nerdtree-git-plugin
    autocmd!
    let g:NERDTreeIndicatorMapCustom = {
    \ "Modified"  : "M",
    \ "Staged"    : "^",
    \ "Untracked" : "U",
    \ "Renamed"   : "R",
    \ "Unmerged"  : "═",
    \ "Deleted"   : "D",
    \ "Dirty"     : "X",
    \ "Clean"     : "C",
    \ 'Ignored'   : 'I',
    \ "Unknown"   : "?"
    \ }
augroup END

" vimspector
augroup plugin_vimspector
    autocmd!
    nmap <F2>  <Plug>VimspectorContinue
    nmap <F3>  <Plug>VimspectorStop
    nmap <F4>  :<C-u>call vimspector#Reset()<CR>
    nmap <F7>  <Plug>VimspectorToggleBreakpoint
    nmap <F8>  <Plug>VimspectorAddFunctionBreadkpoint
    nmap <F10> <Plug>VimspectorStepOver
    nmap <F11> <Plug>VimspectorStepInto
    nmap <F12> <Plug>VimspectorStepOut
augroup END

" lightline
augroup plugin_lightline
    autocmd!
    execute 'source' g:vimrc_dir . '/rc/plugin/lightline.vim'
augroup END

" indentline
augroup plugin_indentline
    autocmd!
    let g:indentLine_fileTypeExclude = ["help", "markdown", "md", "json"]
augroup END

" vim-gitgutter
augroup plugin_vim-gitgutter
    autocmd!
    set signcolumn=yes
    autocmd FocusGained,WinEnter,BufWinEnter * GitGutterEnable
augroup END

" vim-coloresque
augroup plugin_vim-coloresque
    autocmd!
    autocmd BufNewFile,BufRead *.html call plug#load('vim-coloresque')
    autocmd BufNewFile,BufRead *.css call plug#load('vim-coloresque')
augroup END
" }}}


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" :finish config  {{{
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" gui
augroup gui_config
    autocmd!
    if has('gui_running') | execute 'source' g:vimrc_dir . '/rc/gui.vim' | endif
augroup END
" }}}


" xxx
augroup xxx_xxx
    autocmd!
augroup END

