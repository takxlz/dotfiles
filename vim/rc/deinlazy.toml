# 「on_if」は「on_event」も併記しないとerrorMsgが表示される（機能的には問題ない，バグ？）
  # __通常__ならデフォルトで「BunRead」などが設定されるので併記する必要はない

[[plugins]]
repo = 'Shougo/denite.nvim'
on_cmd = 'Denite'
hook_post_update = 'call dein#remote_plugins()'
hook_add = '''
    nnoremap [denite] <Nop>
    nmap <Space>d [denite]
    nnoremap <silent> [denite]r :<C-u>Denite file_mru<CR>
    nnoremap <silent> [denite]d :<C-u>Denite file<CR>
    nnoremap <silent> [denite]f :<C-u>Denite file/rec<CR>
    nnoremap <silent> [denite]c :<C-u>Denite command_history<CR>
    nnoremap <silent> [denite]y :<C-u>Denite neoyank<CR>
    nnoremap <silent> [denite]. :<C-u>Denite filetype<CR>
'''

hook_source = '''
    autocmd FileType denite call s:denite_my_settings()
    function! s:denite_my_settings() abort
        nnoremap <silent><buffer><expr> <CR> denite#do_map('do_action')
        nnoremap <silent><buffer><expr> a denite#do_map('choose_action')
        nnoremap <silent><buffer><expr> d denite#do_map('do_action', 'delete')
        nnoremap <silent><buffer><expr> e denite#do_map('do_action', 'edit')
        nnoremap <silent><buffer><expr> p denite#do_map('do_action', 'preview')
        nnoremap <silent><buffer><expr> q denite#do_map('quit')
        nnoremap <silent><buffer><expr> ' denite#do_map('quick_move')
        nnoremap <silent><buffer><expr> i denite#do_map('open_filter_buffer')
        nnoremap <silent><buffer><expr> <Space> denite#do_map('toggle_select').'j'
        nnoremap <silent><buffer><expr> r denite#do_map('do_action', 'quickfix')
        nnoremap <silent><buffer><expr> <C-r> denite#do_map('restore_sources')
    endfunction
'''

hook_post_source = '''
    hi CursorLine guifg=#E19972  " カーソル(候補)行が見にくいので色をつける
    call denite#custom#source('file/rec', 'matchers', ['matcher_fuzzy','matcher/ignore_globs'])
    call denite#custom#filter('matcher/ignore_globs', 'ignore_globs',
        \ [ '.git/', '.git\', '.ropeproject/', '.ropeproject\', '__pycache__/', '__pycache__\',
        \   'venv/', 'venv\', 'images/', 'images\', '*.min.*', 'img/', 'img\', 'fonts/', 'fonts\',
        \   '.atom/', '.atom\'])
    " ----------------------------------------
    call denite#custom#map('insert', 'jj', '<denite:enter_mode:normal>', 'noremap')
    call denite#custom#map('insert', '<C-j>', '<denite:move_to_next_line>', 'noremap')
    call denite#custom#map('insert', '<C-k>', '<denite:move_to_previous_line>', 'noremap')
'''

[[plugins]]
repo = 'Shougo/defx.nvim'
hook_add = '''
    nnoremap <silent>   <Space>f :<C-u>Defx -listed -resume -buffer-name=tab`tabpagenr()`<CR>
'''
hook_source = '''
    call defx#custom#column('mark', {'readonly_icon': '✗','selected_icon': '✓',})
    call defx#custom#column('icon', {'directory_icon': '▸','opened_icon': '▾','root_icon': ' ',})

    autocmd FileType defx call s:defx_my_settings()
    function! s:defx_my_settings() abort
        " Define mappings
        nnoremap <silent><buffer><expr> <CR> defx#async_action('drop')
        nnoremap <silent><buffer><expr> c defx#do_action('copy')
        nnoremap <silent><buffer><expr> ! defx#do_action('execute_command')
        nnoremap <silent><buffer><expr> m defx#do_action('move')
        nnoremap <silent><buffer><expr> p defx#do_action('paste')
        nnoremap <silent><buffer><expr> l defx#async_action('open')
        nnoremap <silent><buffer><expr> E defx#do_action('open', 'vsplit')
        nnoremap <silent><buffer><expr> P defx#do_action('open', 'pedit')
        nnoremap <silent><buffer><expr> o defx#async_action('open_or_close_tree')
        nnoremap <silent><buffer><expr> O defx#async_action('open_tree_recursive')
        nnoremap <silent><buffer><expr> K defx#do_action('new_directory')
        nnoremap <silent><buffer><expr> N defx#do_action('new_file')
        nnoremap <silent><buffer><expr> M defx#do_action('new_multiple_files')
        nnoremap <silent><buffer><expr> C defx#do_action('toggle_columns', 'mark:filename:type:size:time')
        nnoremap <silent><buffer><expr> S defx#do_action('toggle_sort', 'Time')
        nnoremap <silent><buffer><expr> se defx#do_action('add_session')
        nnoremap <silent><buffer><expr> sl defx#do_action('load_session')
        nnoremap <silent><buffer><expr> d defx#do_action('remove_trash')
        nnoremap <silent><buffer><expr> r defx#do_action('rename')
        nnoremap <silent><buffer><expr> x defx#do_action('execute_system')
        nnoremap <silent><buffer><expr> > defx#do_action('toggle_ignored_files')
        nnoremap <silent><buffer><expr> . defx#do_action('repeat')
        nnoremap <silent><buffer><expr> yy defx#do_action('yank_path')
        nnoremap <silent><buffer><expr> h defx#async_action('cd', ['..'])
        nnoremap <silent><buffer><expr> ~ defx#async_action('cd')
        nnoremap <silent><buffer><expr> \ defx#do_action('cd', getcwd())
        nnoremap <silent><buffer><expr> q defx#do_action('quit')
        nnoremap <silent><buffer><expr> <Space> defx#do_action('toggle_select') . 'j'
        nnoremap <silent><buffer><expr> * defx#do_action('toggle_select_all')
        nnoremap <silent><buffer><expr> j line('.') == line('$') ? 'gg' : 'j'
        nnoremap <silent><buffer><expr> k line('.') == 1 ? 'G' : 'k'
        nnoremap <silent><buffer><expr> <C-l> defx#do_action('redraw')
        xnoremap <silent><buffer><expr> <CR> defx#do_action('toggle_select_visual')
        nnoremap <silent><buffer><expr> <C-g> defx#do_action('print')
        nnoremap <silent><buffer><expr> <Tab> winnr('$') != 1 ? ':<C-u>wincmd w<CR>' : ':<C-u>Defx -buffer-name=temp -split=vertical<CR>'
    endfunction
'''


[[plugins]]
repo = 'Shougo/neoyank.vim'
on_event = 'TextYankPost'
on_source = 'denite.nvim'


[[plugins]]
repo = 'Shougo/neomru.vim'
on_source = 'denite.nvim'


[[plugins]]
repo = 'Shougo/deoplete.nvim'
on_event = 'BufRead'
hook_source = '''
    call deoplete#enable()
    let g:deoplete#auto_complete_delay = 0
'''


[[plugins]]
repo = 'roxma/nvim-yarp'
on_event = 'VimEnter'
on_if = '!has("nvim")'


[[plugins]]
repo = 'roxma/vim-hug-neovim-rpc'
on_event = 'VimEnter'
on_if = '!has("nvim")'


# 一応，残してある
# [[plugins]]
# repo = 'Shougo/unite.vim'
# on_cmd = 'Unite'


# [[plugins]]
# repo = 'Shougo/vimfiler.vim'
# depends = 'unite.vim'
# on_cmd = 'VimFilerExplorer'


[[plugins]]
repo = 'tomtom/tcomment_vim'
on_cmd = 'TComment'
hook_add = '''
    noremap [tcomment] <Nop>
    map <Space>c [tcomment]
    noremap <silent> [tcomment]c :TComment<CR>
    noremap <silent> [tcomment]b :TCommentBlock<CR>
'''


[[plugins]]
repo = 'gorodinskiy/vim-coloresque'
on_ft = ['css', 'html']


[[plugins]]
repo = 'junegunn/vim-easy-align'
on_map = '<Plug>(EasyAlign)'
hook_add = '''
    vmap <Enter> <Plug>(EasyAlign)
'''


[[plugins]]
repo = 'severin-lemaignan/vim-minimap'
on_cmd = 'Minimap'


[[plugins]]
repo = 'plasticboy/vim-markdown'
on_ft = ['md', 'markdown', 'text']


# アップデートするとエラーになるので，ひとまずコメントアウト
# [[plugins]]
# repo = 'previm/previm'
# depends = 'open-browser.vim'
# on_ft = ['md', 'markdown', 'text']
# hook_source = '''
#     nnoremap <silent> <Space><Space>p :PrevimOpen<CR>
# '''


[[plugins]]
repo = 'tyru/open-browser.vim'
on_ft = ['md', 'markdown', 'text']


[[plugins]]
repo = 'reireias/vim-cheatsheet'
on_cmd = 'Cheat'
hook_source = '''
    let g:cheatsheet#cheat_file = g:vimrc_dir . '/doc/keymap.txt'
    let g:cheatsheet#vsplit = 1
'''


[[plugins]]
repo = 'dhruvasagar/vim-table-mode'
on_ft = ['md', 'markdown', 'text']
hook_source = '''
    let g:table_mode_corner = '|'
    " ----------------------------------------
    noremap [tbl] <Nop>
    map <Space>t [tbl]
    noremap [tbl]t :TableModeToggle<CR>
    noremap [tbl]c :Tableize<CR>
'''


[[plugins]]
repo = 'cespare/vim-toml'
on_ft = 'toml'


[[plugins]]
repo = 'w0rp/ale'
on_ft = ['javascript']
hook_source = '''
    let g:ale_sign_column_always = 1
    let g:ale_linters = { 'javascript': ['eslint']}
    " ----------------------------------------
    function! AleListToggle()
        " ALEが起動していないときは終了する
        if !exists('g:ale_open_list') | return | endif
        " listが0(off)のときは1(on)にして、1のときは0にする
        if(g:ale_open_list == 0) 
            ALEDisableBuffer  " 一旦aleを終了(ale起動中に変数を変えても反映されないので)
            let g:ale_open_list = 1
            ALEEnableBuffer  " aleを再度起動
        else
            let g:ale_open_list = 0
            " 下のウィンドウに移動してからウィンドウを消す
            execute ":wincmd j"
            execute ":q"
        endif
    endfunction
    " ----------------------------------------
    nnoremap [ale] <Nop>
    nmap <Space>a [ale]
    nnoremap <silent> [ale]t :call AleListToggle()<CR>
    " エラー間の移動
    call submode#enter_with('alemove', 'n', 'r', '[ale]k', '<Plug>(ale_previous_wrap)')
    call submode#enter_with('alemove', 'n', 'r', '[ale]j', '<Plug>(ale_next_wrap)')
    call submode#map('alemove', 'n', 'r', 'k', '<Plug>(ale_previous_wrap)')
    call submode#map('alemove', 'n', 'r', 'j', '<Plug>(ale_next_wrap)')
'''


[[plugins]]
repo = 'vim-python/python-syntax'
on_ft = 'python'
hook_source = 'let g:python_highlight_all = 1'


[[plugins]]
repo = 'zchee/deoplete-jedi'
on_ft = 'python'


